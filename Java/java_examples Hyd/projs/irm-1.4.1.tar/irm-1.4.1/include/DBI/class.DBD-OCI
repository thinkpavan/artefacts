<?PHP // -*-Mode: C++;-*-
/*
  Philippe Allart (pallart@nordnet.fr) 
  DBD::OCI -- The Oracle >=8  Driver.
  See: http://evil.inetarena.com/php/DBI.php for more info.
  Aknowledgements:
      This work is largely derived from DBD::Pg written
      by Joseph Artsimovich. Thanks.

  Licence: LGPL (http://www.gnu.org/).

  This software is provided "AS IS" with no warrenty either implicit,
  explicit or otherwise.  Use at your own risk.


  Notes:
  
  o insert_id is not implemented
*/

class DBD_OCI {
  
  var $is_persisent;
  var $DBI;
  var $exit_on_fail = 0;
  var $dbh;

  function DBD_connect( $db_name, $db_host = '', 
			$db_user = '', $db_passwd = '',
			$is_persistent = 0){

    //Track the $is_persistant just for fun...
    $is_persistent = $is_persistent ? $is_persistent : 0;
    $this->is_persistent = $is_persistent;

    $db_user = str_replace(";", "" , $db_user);
    $db_name = str_replace(";", "", $db_name);
    //DEBUG...
    // echo "DBD::OCI: [$db_name]/[$db_user]@[$db_name][$is_persistent]<br>\n";

    if( $is_persistent ){
      if ($db_name) {
      	$conn = OCIPLogon ( $db_user, $db_passwd, $db_name );
        } else {
	$conn = OCIPLogon ( $db_user, $db_passwd ); 
	}
    } else {
      if ($db_name) {
      	$conn = OCINLogon ( $db_user, $db_passwd, $db_name );
        } else {
	$conn = OCINLogon ( $db_user, $db_passwd ); 
	}
    }
    
    if( !$conn ){
      $this->errstr = "DBD::OCI Error: Could not connect to the database.";
      return;
    }

    $this->dbh = $conn;


    return( $this );
  }//end connect function



  function disconnect( ){
    OCILogoff ( $this->dbh );
    $this->dbh = undef;
    return( 1 );
  }//end disconnect function


  function prepare( $query ){
    if( ! $this->dbh ){ return; }
    //Parse the query and store the handler of the result...
    $sth = new STH_OCI;
    $sth->DBH( $this );
    $sth->prepare( $query );
    return( $sth );  // returns the handler of the parsed query
  }//end dbh prepare fn


  //do is a reserved word so I have to name this something else.
  function dbh_do( $query ){
    //run the query and return the number of affected rows.
    $result = OCIexecute($query );
    if( ! $result ){
      $err = OCIError($query);
      $this->errstr = "DBI Error: 'dbh_do' failed: ".  $err(message);

      if( $this->exit_on_fail ){
	echo $this->errstr."<br>\n";
	$this->disconnect( );
	exit( ); }

      return;
    }
    $rows = OCIRowCount($query);
    if( $rows == 0 ){ $rows = '0E0'; }
    return( $rows );
  }//end fn do


  function insert_id( ){
    //Get the last serial number from an insert.
    $this->errstr  = "DBI Error: 'insertid' unimplemented.";
    return( -1 );
  }//end fn do


  function quote( $string ){
    if( $string ){
      return( "'".str_replace("'", "''", $string)."'" );
    } else {
      return( 'NULL' );
    }
  }//end fn quote


}//end DBI class


//===========================================================

class STH_OCI {

  var $query;
  var $DBH;
  var $dbh;
  var $result;
  var $row = 0;

  function STH( $dbh = '' ){
    if( $dbh ){
      $this->dbh = &$dbh;
    }
    return( $this );
  }


  function DBH( $dbh ){
    $this->DBH = &$dbh; 
    $this->dbh = &$dbh->dbh;
    return( $dbh );
  }


  function prepare( $query ){
    if( ! $this->dbh ){ return; }
    // echo "Parsing query: [".$query."]";
    $this->query = OCIParse($this->dbh, $query);
    $this->result = undef;
    return( $query );
  }


  function execute( ){
    if( ! $this->dbh ){ return; }
    $this->result = OCIExecute($this->query );
    
    if( ! $this->result ){
      $err = OCIError($this->query );
      $this->errstr = "STH Execute failed: ".$err[message] ;
      
      return;
    }

    return( 1 );
  }//end execute fn


  function finish( ){
    if( ! $this->query ){ return; }
    OCIFreeStatement( $this->query );
    $this->result = undef;
    $this->query = undef;
    return( 1 );
  }//end execute fn


  function rows( ){
      return( OCIRowCount($this->$query) );
  } //end rows fn

  function fetchrow_array( ){
    if( ! $this->result ){
      //echo "STH Error: Calling fetchrow on null result.<br>\n";
      return;
    }
   if ( OCIFetchInto( $this->query, $res, OCI_NUM + OCI_RETURN_NULLS )) {
    	return( $res );
	} else {
	return( 0 );
	}
  }


  function fetchrow_hash( ){
    if( ! $this->result ){
      //echo "STH Error: Calling fetchrow on null result.<br>\n";
      return;
    }
   if ( OCIFetchInto( $this->query, $res, OCI_ASSOC + OCI_RETURN_NULLS )) {
    	return( $res );
	} else {
	return( 0 );
	}
  }
}

  
$GLOBALS[classDBDOCI_read] = 1;
