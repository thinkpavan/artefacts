<?PHP // -*-Mode: C++;-*-
/*
  Bill Adams (bill<at>evil<dot>inetarena<dot>com)
  DBD::mysql -- The MySQL Driver.
  See: http://evil.inetarena.com/php/DBI.php for more info.

  Licence: LGPL (http://www.gnu.org/).

  This software is provided "AS IS" with no warrenty either implicit,
  explicit or otherwise.  Use at your own risk.

  17 Mar 2000  baa  Moved the DBD stuff into their own class files.
  07 May 2000  baa  Added rows( ) function.
  31 Jan 2001  baa  Allow prepared statements in execute; patch 
  .                   by Norman Clarke.

*/

class DBD_mysql {
  
  var $is_persisent;
  var $DBI;
  var $exit_on_fail = 0;

  function DBD_connect( $db_name, $db_host = '', 
			$db_user = '', $db_passwd = '',
			$is_persistent = 0){

    //Track the $is_persistant just for fun...
    $is_persistent = $is_persistent ? $is_persistent : 0;
    $this->is_persistent = $is_persistent;

    //DEBUG...
    //echo "DBD::mysql: [$db_name][$db_host][$db_user][$is_persistent]<br>\n";


    //if( $is_persistent ){
    //  $conn = mysql_pconnect( $db_host, $db_user, $db_passwd );
    //} else {
      $conn = mysql_connect( $db_host, $db_user, $db_passwd );
      //}
    
    if( !$conn ){
      $this->errstr = "DBD::mysql Error: Could not connect to the database.";
      return;
    }
    
    if( ! mysql_select_db( $db_name )){
      $this->errstr =  "DBD::mysql Error: Could not select the database.<br>\n";
      return;
    }
    $this->dbh = $conn;
    return( $this );
  }//end connect function



  function disconnect( ){
    mysql_close( $this->dbh );
    $this->dbh = undef;
    return( 1 );
  }//end disconnect function


  function prepare( $query ){
    if( ! $this->dbh ){ return; }
    //Does nothing but save the query...
    $sth = new STH_mysql;
    $sth->DBH( $this );
    $sth->prepare( $query );
    return( $sth );
  }//end dbh prepare fn


  //do is a reserved word so I have to name this something else.
  function dbh_do( $query ){
    //run the query and return the number of affected rows.
    $result = mysql_query( $query, $this->dbh );

    if( ! $result ){
      $this->errstr = "DBI Error: 'dbh_do' failed: ".
	mysql_error( $this->dbh );

      if( $this->exit_on_fail ){
	echo $this->errstr."<br>\n";
	$this->disconnect( );
	exit( ); }
      return '';
    }
    $rows   = mysql_affected_rows( $this->dbh );
    return( $rows );
  }//end fn do


  function insert_id( ){
    //Get the last serial number from an insert.
    return( mysql_insert_id( $this->dbh ));
  }//end fn do


  function quote( $string ){
    if( $string ){
      return( "'".addslashes( $string )."'" );
    } else {
      return( 'NULL' );
    }
  }//end fn quote


}//end DBI class


//===========================================================

class STH_mysql {

  var $query;
  var $DBH;
  var $dbh;
  var $result;

  function STH( $dbh = '' ){
    if( $dbh ){
      $this->dbh = &$dbh;
    }
    return( $this );
  }


  function DBH( $dbh ){
    $this->DBH = &$dbh;  //watch out, this copies the object not the reference.
    $this->dbh = &$dbh->dbh;
    return( $dbh );
  }


  function prepare( $query ){
    if( ! $this->dbh ){ return; }
    $this->query = $query;
    return( $query );
  }


  function execute( $args="" ){
    if( ! $this->dbh ){ return; }
    /* 
       allow replacement of "?" values in prepared statements
    */
    if ( $args ) {
       $tok = strtok( $this->query, " " );
       while ( $tok ) {
        if ( $tok == '?' ) {
           if ( ereg( "^[0-9]+$", $args[0] ) ) {
            $query .= "$args[0] ";
           }
           else {
              $query .= "'" . addslashes( $args[0] ) . "'";
           }
           array_shift( $args );
        }
        else $query .= "$tok ";
        $tok = strtok ( " " );
       }
       $this->query = $query;
    }

    //echo "Running query $this->query<br>\n";
    $this->result = mysql_query( $this->query, $this->dbh );
    
    if( ! $this->result ){
      $this->errstr = "STH Execute failed: ".mysql_error( $this->dbh );
      return;
    }

    return( 1 );
  }//end execute fn


  function finish( ){
    if( ! $this->result ){ return; }
    mysql_free_result( $this->result );
    $this->result = undef;
    return( 1 );
  }//end execute fn


  function rows(){
    if( ! $this->dbh ){ return; }
    if (!$this->result) { return; }
    return mysql_num_rows($this->result);
  }
 

  function fetchrow_array( ){
    if( ! $this->result ){
      //echo "STH Error: Calling fetchrow on null result.<br>\n";
      return;
    }
    return( mysql_fetch_row( $this->result ));
  }


  function fetchrow_hash( ){
    if( ! $this->result ){
      //echo "STH Error: Calling fetchrow on null result.<br>\n";
      return;
    }

    return( mysql_fetch_array( $this->result ));
  }
}

  
$GLOBALS[classDBDmysql_read] = 1;
