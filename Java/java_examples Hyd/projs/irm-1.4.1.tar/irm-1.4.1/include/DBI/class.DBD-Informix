<?PHP // -*-Mode: C++;-*-
/*
  Bill Adams (bill<at>evil<dot>inetarena<dot>com)
  DBD::Informix -- The Informix Driver.
  See: http://evil.inetarena.com/php/DBI.php for more info.

  Licence: LGPL (http://www.gnu.org/).

  This software is provided "AS IS" with no warrenty either implicit,
  explicit or otherwise.  Use at your own risk.

  07 May 2000  baa  Added rows( ) function to STH object.

*/

class DBD_Informix {
  
  var $is_persisent;
  var $errstr;
  var $dbh;

  function DBD_connect( $db_name, $db_host = '', 
			$db_user = '', $db_passwd = '',
			$is_persistent = 0){
    //Track the $is_persistent just for fun...
    $is_persistent = $is_persistent ? $is_persistent : 0;
    $this->is_persistent = $is_persistent;

    //DEBUG...
    echo "DBD::Informix: [$db_name][$db_host][$db_user][$is_persistent]<br>\n";

    if( ! getenv( "INFORMIXDIR" ) || ! getenv( "INFORMIXSERVER" )){
      if( ! getenv( "INFORMIXDIR" )){
	echo "DBD::Informix -- No INFORMIXDIR set, put something like 'setenv( \"INFORMIXDIR=/path/to/informix\" );' in your program.<br>\n";
      }
      if( ! getenv( "INFORMIXSERVER" )){      
	echo "DBD::Informix -- No INFORMIXSERVER set, put something like 'setenv( \"INFORMIXSERVER=defaultserver\" );' in your program.<br>\n";
      }

      $this->errstr = "DBD::Informix -- Error, required Informix environment missing.";
      return; }

    if( $is_persistent ){
      echo "Persistent Connection.\n";
      $conn = ifx_pconnect( $db_name, $db_user, $db_passwd );
    } else {
      $conn = ifx_connect( $db_name, $db_user, $db_passwd );
    }

    if( ! $conn ){
      $this->errstr = "DBD::Informix Error: Could not connect to $db_name";
      return;
    }
    
    $this->dbh = $conn;
    return( $this );
  }//end connect function



  function disconnect( ){
    ifx_close( $this->dbh );
    $this->dbh = undef;
    return( 1 );
  }//end disconnect function


  function prepare( $query ){
    if( ! $this->dbh ){ return; }
    //Does nothing but save the query...
    $sth = new STH_Informix;
    $sth->DBH( $this );
    $sth->prepare( $query );
    return( $sth );
  }//end dbh prepare fn


  //do is a reserved word so I have to name this something else.
  function dbh_do( $query ){
    //run the query and return the number of affected rows.
    $result = ifx_query( $query, $this->dbh );
    if( ! $result ){
      if( ereg( "SQLCODE=(-?[0-9]+)", ifx_error( $this->dbh ), $regs )){
	$error_no = $regs[1];
	if( $error_no == -201 ){
	  $error_message = "($error_no) Syntax Error";
	}
      } else {
	$error_message = ifx_error( $this->dbh );
	//$error_message = ifx_errormsg( $this->dbh );
      }
	       
      
      $this->errstr = "DBI Error: 'dbh_do' failed: $error_message";
      return;
    }
    $rows   = ifx_affected_rows( $result ); //this->dbh );
    $this->result = $result;
    return( $rows );
  }//end fn do


  function insert_id( ){
    //Get the last serial number from an insert.
    $sqlca = ifx_getsqlca( $this->result );
    return( $sqlca['sqlerrd1'] );
  }//end fn do


  function quote( $string ){
    //In informix, to quote a single quote, double it.  I do not 
    //  know how other characters have to be quoted but it looks like they
    //  don't have to be...
    if( $string ){
      return( "'".ereg_replace( "'", "''", $string )."'" );
    } else {
      return( 'NULL' );
    }
  }//end fn quote
}//end DBI class


//===========================================================

class STH_Informix {

  var $query;
  var $DBH;
  var $dbh;
  var $result;

  function STH_Informix( $dbh = '' ){
    if( $dbh ){
      $this->dbh = &$dbh;
    }
    return( $this );
  }


  function DBH( $dbh ){
    $this->DBH = &$dbh;
    $this->dbh = &$dbh->dbh;
    return( $dbh );
  }


  function prepare( $query ){
    if( ! $this->dbh ){ return; }
    $this->query  = $query;
    if( $this->result ){ ifx_free_result( $this->result ); }
    $this->result = ifx_prepare( $query, $this->dbh, 0 );
    if( ! $this->result ){
      $this->errstr = "DBD::Informix: ".ifx_error( $this->dbh );
      return;
    }
    return( $this->result );
  }


  function execute( ){
    if( ! $this->dbh ){ return; }
    if( ! $this->result ){ return; }
    $worked = ifx_do( $this->result );
    if( ! $worked ){
      ifx_free_result( $this->result );
      $this->errstr = "STH Execute failed: ".ifx_error( $this->dbh );
      return;
    }
    return( 1 );
  }//end execute fn


  function finish( ){
    if( ! $this->result ){ return; }
    ifx_free_result( $this->result );
    $this->result = undef;
    return( 1 );
  }//end execute fn


  function rows( ){
    if( ! $this->dbh ){ return; }
    return ifx_num_rows( $this->result );
  }



  function fetchrow_array( ){
    if( ! $this->result ){
      //echo "STH Error: Calling fetchrow on null result.<br>\n";
      return;
    }
    return( ifx_fetch_row( $this->result, "NEXT" ));
  }


  function fetchrow_hash( ){
    if( ! $this->result ){
      //echo "STH Error: Calling fetchrow on null result.<br>\n";
      return;
    }
    return( ifx_fetch_row( $this->result ));
  }
}

  
$GLOBALS[classDBDInformix_read] = 1;
