<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><title>Singleton Pattern: A review and analysis of existing C++ implementations - The Code Project - C++ / MFC</title>




<!-- base -->
<meta http-equiv="Reply-to" content="mailto:webmaster@codeproject.com">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="MS.LOCALE" content="en-US">
<meta name="Description" content="Review existing Singleton Patterns C++  implemenations, and how to come up with an extensible design that has the best of all worlds">
<meta name="Search.TopicType" content="kbArticle">
<meta name="Author" content="Lai Shiaw San Kent">
<meta name="Search.PublishDate" content="11 Aug 2003 14:00:00 GMT">
<meta name="Search.RevisedDate" content="20 Aug 2003 14:00:00 GMT">

<meta name="keywords" content="Free source code, , Visual C++, MFC, Windows, Singleton Pattern C++ Templates Policy Loki">
<meta name="Copyright" content="Article content copyright Lai Shiaw San Kent, 2003, everthing else Copyright © CodeProject, 1999-2006, All Rights Reserved.">
<link rel="alternate" type="application/rss+xml" title="CodeProject Lounge Postings" href="http://www.codeproject.com/webservices/LoungeRSS.aspx">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - All topics" href="http://www.codeproject.com/webservices/articlerss.aspx?cat=1">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - MFC / C++" href="http://www.codeproject.com/webservices/articlerss.aspx?cat=2">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - C#" href="http://www.codeproject.com/webservices/articlerss.aspx?cat=3">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - ASP.NET" href="http://www.codeproject.com/webservices/articlerss.aspx?cat=4">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - .NET" href="http://www.codeproject.com/webservices/articlerss.aspx?cat=5">
<link rel="icon" href="http://www.codeproject.com/favicon.ico" type="image/ico">
<link rel="SHORTCUT ICON" href="http://www.codeproject.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="singleton.asp_files/global.css">

<link rel="stylesheet" type="text/css" href="singleton.asp_files/netscape6.css">

<script language="javascript" src="singleton.asp_files/oncopy.js"></script>
<script language="javascript">
if (top != self) top.location.href = location.href;
if (typeof(DemoUrl) != "undefined")
	document.write('<me' + 'ta http' + '-equiv="re' + 'fresh" con' + 'tent="1;url=' + DemoUrl + '">');
</script></head><body style="margin: 0pt; background-color: rgb(255, 255, 255);" oncopy="return copyCode();" alink="red" bgcolor="white" link="blue" text="black" vlink="navy">

<!-- COPYRIGHT 2006 I/PRO Corporation ALL RIGHTS RESERVED. - Page view auditing -->
<script type="text/javascript" language="JavaScript">
var LSPT="";
LSPT += "?durl=" + escape(document.URL);
LSPT += "&hostname=" + location.hostname;
LSPT += "&url=" + location.pathname;
LSPT += "&query=" + escape(location.search) + escape(location.hash);
LSPT += "&referrer=" + escape(document.referrer);
LSPT += "&browser=" + escape(navigator.appName);
LSPT += "&version=" + escape(navigator.appVersion);
LSPT += "&os=" + escape(navigator.platform);
LSPT += "&xdomain=codeproject.com";
LSPT += "&custid=codeproject";
</script>
<script type="text/javascript">
document.write('<img src=http://'+'content.ipro.com/images/pixel.gif'+LSPT+' height="1" width="1" style="position:absolute; top:0px; left:0px">');
</script><img src="singleton.asp_files/pixel.gif" style="position: absolute; top: 0px; left: 0px;" height="1" width="1">
<noscript>
<img src="http://content.ipro.com/images/pixel?version=nonjava" height="1" width="1" style="position:absolute;top:0px;left:0px">
</noscript>
<!-- END I/PRO PAGE TAG -->


<table border="0" cellpadding="0" cellspacing="0" width="100%">

<tbody><tr>
	<td class="HeaderLogo"><a href="http://www.codeproject.com/"><img alt="Home" src="singleton.asp_files/codeproject225x90.gif" border="0" height="90"></a></td>
	<td class="HeaderBanner"><span id="AdBanner4"><script language="javascript">document.write("<a href=\"/script/admentor/admentorredir.asp?id=2250&way=ban\" target=_blank><img src=\"/script/ann/ServeImg.aspx?File=%2Fscript%2Fadmentor%2Fimages%2FGrid%5F728x90%2Egif&C=False&id=2250&cb=2006707\" alt=\"\" border=0 width=728 height=90></a>");</script><a href="http://www.codeproject.com/script/admentor/admentorredir.asp?id=2250&amp;way=ban" target="_blank"><img src="singleton.asp_files/ServeImg.htm" alt="" border="0" height="90" width="728"></a></span></td>
</tr>
<tr><td colspan="2">
<table class="MemberNavBar" border="0" cellpadding="5" cellspacing="0" width="100%">
<tbody><tr valign="middle">

<td class="smallText" style="font-weight: bold;">3,579,382 members and growing! &nbsp;
11,588 now online.
</td>


<td class="userNavText" align="right">



<a href="http://www.codeproject.com/script/profile/whos_who.asp?id=3585371">
My Profile
</a> |
<a href="http://www.codeproject.com/script/profile/modify.asp?ct=/cpp/singleton.asp"><b>My Settings</b></a> |
<a href="http://www.codeproject.com/script/profile/bookmark_list.asp">My Bookmarks</a> |
<a href="http://www.codeproject.com/script/articles/list_articles.asp?userid=3585371">My Articles</a> |

<a href="http://www.codeproject.com/script/profile/logoff.asp?ct=/cpp/singleton.asp">Sign out</a>


</td>
</tr>
</tbody></table></td></tr>
<tr><td colspan="2">
<table class="SiteNavBar" id="tblSiteToolbar" cellpadding="0" cellspacing="0">
<tbody><tr>
<td><a href="http://www.codeproject.com/">Home</a></td>
<td nowrap="nowrap"><a href="http://www.codeproject.com/index.asp?cat=2">MFC/C++</a></td>
<td><a href="http://www.codeproject.com/index.asp?cat=3">C#</a></td>
<td nowrap="nowrap"><a href="http://www.codeproject.com/index.asp?cat=4">ASP.NET</a></td>
<td><a href="http://www.codeproject.com/index.asp?cat=5">.NET</a></td>
<td nowrap="nowrap"><a href="http://www.codeproject.com/index.asp?cat=6">VB.NET</a></td>
<td class="SelCat" nowrap="nowrap"><a href="http://www.codeproject.com/index.asp?cat=1">All Topics</a></td>
<td width="100%">&nbsp;</td>
<td>
	<div id="MenuPos" style="position: relative; width: 380px; height: 22px; top: 1px;">
	<table id="MPH" style="border-width: 0pt; height: 20px; display: none;" cellpadding="0" cellspacing="0" width="380">
	<tbody><tr valign="middle">
		<td style="border-width: 0pt;" nowrap="nowrap"><a href="http://www.codeproject.com/info/faq.asp">Help!</a></td>
		<td style="border-width: 0pt;" nowrap="nowrap"><a href="http://www.codeproject.com/info/latest.asp">Articles</a></td>
		<td style="border-width: 0pt;" nowrap="nowrap"><a href="http://www.codeproject.com/script/comments/forums.asp">Message Boards</a></td>
		<td style="border-width: 0pt;" nowrap="nowrap"><a href="http://www.codeproject.com/store/">StoreFront</a></td>
		<td style="border-width: 0pt;" nowrap="nowrap"><a href="http://www.codeproject.com/lounge.asp">Lounge</a></td>
	</tr>
	</tbody></table>
	</div>
</td>
</tr>
</tbody></table>
<script type="text/javascript">function Go(){return}</script>
<script type="text/javascript" src="singleton.asp_files/cpmenu_var.js"></script>
<script type="text/javascript" src="singleton.asp_files/menu10_com.js"></script>
<script type="text/javascript">
var MPH = document.getElementById("MPH");
if (MPH) MPH.style.display='none';
</script>
</td></tr>


<tr><td colspan="2">

	<table class="ArticleHeader" cellpadding="3" cellspacing="0" width="100%">
	<tbody><tr valign="top">
		<td class="smallText" style="padding-right: 10px;"><a href="http://www.codeproject.com/?cat=1">All Topics</a>, <a href="http://www.codeproject.com/?cat=2">MFC / C++</a> &gt;&gt; <a href="http://www.codeproject.com/cpp/">C++ / MFC</a> &gt;&gt; <a href="http://www.codeproject.com/cpp/#Design+and+Strategy">Design and Strategy</a><br>
			
			<br>
			<div style="font-weight: bold; font-size: 16pt;">Singleton Pattern: A review and analysis of existing C++ implementations</div>
			<b>By <a href="http://www.codeproject.com/script/Articles/list_articles.asp?userid=203178">Lai Shiaw San Kent</a></b>.
			
			<br><br><div style="font-size: 12px;">Review
existing Singleton Patterns C++ implemenations, and how to come up with
an extensible design that has the best of all worlds</div>
		</td>
		<td class="smallText" style="width: 200px;">
			C++ (VC7.1)<br> Windows<br> Win32, VS<br> Dev<br>
			<span style="padding-right: 2ex;">Posted</span>: <b>12 Aug 2003</b><br>
			
			<span style="padding-right: 0.3ex;">Updated</span>: <b>21 Aug 2003</b><br>
			<span style="padding-right: 3ex;">Views</span>: <b>59,161</b>
		</td>
	</tr>
	
	

	


</tbody></table>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr valign="top">

	
	<td rowspan="2" class="LHNavBar">
	
	<!-- Yes, there are IE hacks that will allow us to create a min-width DIV 
	     (eg http://www.webreference.com/programming/min-width/) but I couldn't
	     be arsed. Wait for it in v2.0 -->
	
	

<table class="MemberNavBar" style="border: 0pt none ; margin-bottom: 10px;" cellspacing="0">
<tbody><tr valign="top"><td><img src="singleton.asp_files/books2_sml.gif" height="16" width="16"></td><td class="smallText"><a href="http://www.amazon.com/gp/redirect.html?link_code=ur2&amp;tag=thecodeprojec-20&amp;camp=1789&amp;creative=9325&amp;location=/gp/browse%3Fnode=5">Programming books</a></td></tr><tr valign="top"><td></td><td></td></tr><tr valign="top"><td><img src="singleton.asp_files/support_icon.gif" height="16" width="16"></td><td class="smallText"><a href="http://www.codeproject.com/store/"><b>Ultimate Combo<br>MFC tools $449</b></a></td></tr><tr valign="top"><td></td><td></td></tr>

<tr valign="top">	
      <td><img src="singleton.asp_files/mail.gif" height="16" width="16"></td>
      <td class="SmallText">
<a href="http://www.codeproject.com/script/recommend/form.asp?guid=singleton%2Fcpp8%2F12%2F2003">Send to a friend</a></td>
</tr>

</tbody></table>
<center>
<script language="javascript">document.write("<a href=\"/script/admentor/admentorredir.asp?id=2255&way=ban\" target=_blank><img src=\"/script/ann/ServeImg.aspx?File=%2Fscript%2Fadmentor%2Fimages%2FTCPIP%5F160x600%2Egif&C=False&id=2255&cb=2006714\" alt=\"\" border=0 width=160 height=600></a>");</script><a href="http://www.codeproject.com/script/admentor/admentorredir.asp?id=2255&amp;way=ban" target="_blank"><img src="singleton.asp_files/ServeImg_002.htm" alt="" border="0" height="600" width="160"></a>
</center>
<br><br>

	
	<img src="singleton.asp_files/t.gif" height="1" width="160">
	
	</td>
	

	<td width="100%">

		<table class="SearchHeaderBar" cellspacing="0" width="100%">
<tbody><tr>
<td align="right" nowrap="nowrap" valign="middle" width="60%">

	<form method="post" action="/info/search.asp" name="Search" style="margin: 0pt;">
	<b>Search &nbsp;</b><input class="smallText" name="target" style="width: 200px;">
	<select style="font-weight: bold; font-size: 8pt;" name="st">
		<option value="kw">Articles</option>
		<option value="au">Authors</option>
	</select>
	<input style="font-weight: bold; font-size: 8pt;" value=" Go! " type="submit"> &nbsp;
	</form>
</td>

<td class="tinyText" nowrap="nowrap">
<a href="http://www.codeproject.com/info/search.asp">Advanced Search</a><br>
<a href="http://www.codeproject.com/script/articles/sections.asp">Sitemap</a>
</td>
</tr>
</tbody></table>
		
		<table width="100%">
		<tbody><tr valign="top">
		<td class="SmallText" nowrap="nowrap"><table><tbody><tr><td class="smallText" nowrap="nowrap"><img src="singleton.asp_files/print.gif" align="absmiddle"> <a href="http://www.codeproject.com/cpp/singleton.asp?print=true" target="_print">Print</a></td><td class="smallText" nowrap="nowrap"><img src="singleton.asp_files/sitebuild_icon.gif" align="absmiddle"><a href="http://www.codeproject.com/script/submit/ReportProblem.asp?GUID=singleton%2Fcpp8%2F12%2F2003">Broken Article?</a></td><td class="smallText" nowrap="nowrap"><img src="singleton.asp_files/link.gif" align="absmiddle"><a href="http://www.codeproject.com/script/profile/add_bookmark.asp?t=0&amp;ct=%2Fcpp%2Fsingleton%2Easp&amp;guid=singleton%2Fcpp8%2F12%2F2003">Bookmark</a></td><td class="smallText" nowrap="nowrap"><img src="singleton.asp_files/mail_small.gif" align="absmiddle"> <a href="#__comments">Discuss</a></td></tr></tbody></table>
		</td>
		<td align="right" nowrap="nowrap"><a name="__top"></a><table><tbody><tr><td class="smallText" align="right">26 votes  for this article.</td><td>
<table border="2" cellpadding="0" cellspacing="0"><tbody><tr>
<td><img src="singleton.asp_files/red.gif" border="0" height="5" width="20"></td>
<td><img src="singleton.asp_files/red.gif" border="0" height="5" width="20"></td>
<td><img src="singleton.asp_files/red.gif" border="0" height="5" width="20"></td>
<td><img src="singleton.asp_files/red.gif" border="0" height="5" width="20"></td>
<td><img src="singleton.asp_files/red.gif" border="0" height="5" width="6"><img src="singleton.asp_files/white.gif" border="0" height="5" width="14"></td>
</tr></tbody></table>
</td></tr><tr><td colspan="2" class="smallText" align="right"><a href="http://www.codeproject.com/script/articles/top_articles.asp?st=2" title="Calculated as rating x Log10(# votes)">Popularity: 6.05</a>. Rating: <b>4.28</b> out of 5.</td></tr></tbody></table></td></tr>
		</tbody></table>
		
			
	</td>
</tr>

<tr>
	<td class="ArticlePane">
<ul style="background-color: rgb(238, 238, 238); margin-right: 20px;"><li style="font-size: 8pt; list-style-image: url(/images/warning.gif);">You are signed up for one or more <a href="http://www.codeproject.com/script/profile/subscribe.asp">newsletters</a> but unfortunately we are unable to send you emails. Please click <a href="http://www.codeproject.com/script/profile/SendConfirmRequest.asp">here</a> to have an email sent that will allow us to confirm your email address.</li></ul>
<span name="intelliTxt" id="intelliTXT">
<div id="contentdiv">


<!-- Article Starts -->


<!-- Download Links -->
<ul class="download">
<li><a href="http://www.codeproject.com/cpp/singleton/singleton.zip">Source and demo files - 4 Kb</a> </li></ul><!-- Add the rest of your HTML here -->
<h2>Introduction</h2>
<p nd="1">As you design your <a itxtdid="2471511" target="_blank" href="#" style="border-bottom: 0.075em solid darkgreen; font-weight: normal; font-size: 100%; text-decoration: underline; color: darkgreen; background-color: transparent; padding-bottom: 1px;" class="iAs">application</a>
framework, you may come across certain framework objects that should
enforce only a single instance of itself throughout the application
lifetime. These objects can range from a file system, a graphic system,
to even a simple application logging utility. The design of the
framework object is thus known as applying the Singleton Pattern, and
is described in [GOF] as </p>
<p><i>Ensure a class only has one instance, and provide a global point of access to it.</i></p>
<p nd="2">The definition of a singleton is simple, yet has resulted in
a wide variety of implementations. Each of this implementation varies
from the simplest of issues like storage of instance, to complex
multi-threading.</p>
<p nd="3">In this article I will describe the few singleton
implementations encountered, and put together a singleton object that
resolves all likely issues.</p>
<h2>Implications of using The Singleton Pattern</h2>
<p nd="4">Before we begin, it is best to understand the implications of
using The Singleton Pattern; that is, the restrictions and rules we
have to follow, as well as the benefits. Describe in [GOF], an object
implementing The Singleton Pattern must, </p><ul>
<li nd="5">Ensure only one instance of a class, and it must be
accessible to clients from a well-known access point. Note that
however, the limitations did not imply if it is to be a language
imposed limitation, or simply a programmer self-imposed limitation. </li><li nd="6">Allow clients to use an extended instance of the
class without modifying their code. That is, the sole instance should
be extensible by subclassing.</li></ul>
<p></p>
<p nd="7">Additional, a Singleton should own itself. The client is not
required to perform additional steps to create the Singleton. From a
client side of view, he is, and always is, a client, and takes no part
in creation or destruction of the Singleton object. </p><p nd="8">With The Singleton Pattern, the object can, 
</p><ul>
<li nd="9">Enforce controlled access to the sole instance. 
</li><li nd="10">Avoid polluting the global namespace with global variables that store sole instances. 
</li><li nd="11">Easily configure the current object to be used in the application, as long as it is extended from the base object.</li></ul>
<p></p>
<h2>Static data and functions, a first encounter of a self-proclaimed Singleton</h2>
<p nd="12">Our first review of a &#8216;Singleton&#8217; implementation is as follows</p><pre nd="13" lang="c++"><span class="cpp-keyword">class</span> PrintJob {...};

<span class="cpp-keyword">class</span> PrintQueue {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> AddJob(PrintJob&amp;);

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">static</span> std::queue<printjob nd="14"> queue_;

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> PrintQueue () {}
    <span class="cpp-keyword">inline</span> ~ PrintQueue () {}
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> PrintQueue (PrintQueue <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">inline</span> PrintQueue&amp; <span class="cpp-keyword">operator</span>=( PrintQueue <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
};    <span class="cpp-comment">//    end of class PrintQueue</span>
</printjob></pre>
<p nd="15">At first glance it fulfills the basic requirement of The Singleton Pattern, that is, only a single instance of <code nd="16">PrintQueue</code>
can exist. Additional, it performs the automatic&nbsp;destruction
of&nbsp;itself, since static data are destroyed upon program
termination.&nbsp;However, it falls short on the second requirement,
the inability to subclass the application, and yet provides the client
the new extended version without making changes to the code. </p>
<p nd="17">Another area the implementation falls short of is the
inability to control the initialization and destruction of the
singleton. If, during the application lifespan, that <code nd="18">PrintQueue</code> was never used, you have paid for the cost of initializing all of <code nd="19">PrintQueue</code>&#8217;s static data without using it at all. We should always try to obey the same rule that C++ has always obeyed, </p>
<p><i>You shouldn&#8217;t pay for what you don&#8217;t use.</i> </p>
<p nd="20">Another reason why we would want to control the destruction
of the singleton would be, for example, in the case of a Singleton
Logging Utility. Imagine that we have one other static object, that
upon destruction when program exits, is required to log certain
debugging information. However, the static data required to perform
logging, at that point of time, might have already been destroyed. This
could crash the application immediately. </p>
<p nd="21">So now, let&#8217;s move on to a non-static data/function approach
and have a look at the another Singleton Pattern implementation, this
time proposed by Scott Meyer [Meyers 1996b] </p>
<h2>Meyer&#8217;s Singleton</h2><pre nd="22" lang="c++"><span class="cpp-keyword">class</span> PrintQueue {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">void</span> AddJob(PrintJob&amp;);

    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">static</span> PrintQueue&amp; Instance() {
        <span class="cpp-keyword">static</span> PrintQueue instance;
        <span class="cpp-keyword">return</span> instance;
    }

<span class="cpp-keyword">private</span> : 
    std::queue<printjob nd="23"> queue_;

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> PrintQueue() {}
    <span class="cpp-keyword">inline</span> ~PrintQueue() {}
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> PrintQueue(PrintQueue <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">inline</span> PrintQueue&amp; <span class="cpp-keyword">operator</span>=(PrintQueue <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
};    <span class="cpp-comment">//    end of class PrintQueue</span>
</printjob></pre>
<p nd="24">As before, this approach has only managed to fulfill the
basic requirement, a single instance, as well as
automatic&nbsp;Singleton destruction.&nbsp;However, it does manage to
solve the problem of not paying for what we don&#8217;t use. Notice that with
this implementation, the only instance of <code nd="25">PrintQueue</code> is a static instance in Instance(). Meyers explained [Meyers 1996b],</p>
<p><i>&#8230;First, it's important that the single Printer object be static
in a function and not in a class. An object that's static in a class
is, for all intents and purposes, always constructed (and destructed),
even if it's never used. In contrast, an object that's static in a
function is created the first time through the function, so if the
function is never called, the object is never created. (You do,
however, pay for a check each time the function is called to see
whether the object needs to be created.)&#8230;&#8230; We know exactly when a
function static is initialized: the first time through the function at
the point where the static is defined. The situation with a class
static (or, for that matter, a global static, should you be so gauche
as to use one) is less well defined. C++ offers certain guarantees
regarding the order of initialization of statics within a particular
translation unit (i.e., a body of source code that yields a single
object file), but it says nothing about the initialization order of
static objects in different translation units&#8230;</i></p>
<h2>Allowing subclass, a quick hack</h2>
<p nd="26">A quick hack can be applied to the class above actually, so
that we can fulfill the second requirement, subclass of the Singleton
and yet not required to change any client code. </p><pre nd="27" lang="c++"><span class="cpp-keyword">class</span> PrintQueue {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">void</span> AddJob(PrintJob&amp;);

    <span class="cpp-keyword">static</span> PrintQueue&amp; Instance();

<span class="cpp-keyword">protected</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> PrintQueue() {}
    <span class="cpp-keyword">inline</span> ~PrintQueue() {}

<span class="cpp-keyword">private</span> : 
    std::queue<printjob nd="28"> queue_;

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> PrintQueue(PrintQueue <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">inline</span> PrintQueue&amp; <span class="cpp-keyword">operator</span>=(PrintQueue <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
};    <span class="cpp-comment">//    end of class PrintQueue </span>

<span class="cpp-keyword">class</span> DerivedPrintQueue : <span class="cpp-keyword">public</span> PrintQueue {...};

PrintQueue&amp; PrintQueue::Instance() {
    <span class="cpp-keyword">static</span> std::auto_ptr&lt;DerivedPrintQueue&gt; instance(<span class="cpp-keyword">new</span> DerivedPrintQueue);
    <span class="cpp-keyword">return</span> *instance;
}
</printjob></pre>
<p nd="29">By having a pointer to an object that has subclassed <code nd="30">PrintQueue</code>, we have managed to allow clients to use an extended version of <code nd="31">PrintQueue</code>, yet shield them from the knowledge.</p>
<p nd="32">Notice the usage of <code nd="33">std::auto_ptr</code>. Since instance is now a pointer, there must be a mean to destroy the object. <code nd="34">std::auto_ptr</code> helps us accomplish this, since upon the destruction of <code nd="35">std::auto_ptr</code>, the destructor calls delete on the held object pointer if valid. And since <code nd="36">instance </code>is a static data, the time of destruction is during program termination.</p>
<p nd="37">Although this version of fulfills the basic requirement of
The Singleton Pattern, this is far from being complete. This being, the
destruction order is still undefined.</p>
<h2>Removing std::auto_ptr, using atexit</h2>
<p nd="38">The C Standard library provides a function <code nd="39">atexit</code>, which msdn describes,</p>
<p><i>The atexit function is passed the address of a function (func) to
be called when the program terminates normally. Successive calls to
atexit create a register of functions that are executed in last-in,
first-out (LIFO) order. The functions passed to atexit cannot take
parameters. atexit and _onexit use the heap to hold the register of
functions. Thus, the number of functions that can be registered is
limited only by heap memory.</i></p>
<p nd="40">Thus, using <code nd="41">atexit</code>, we can actually do away with <code nd="42">std::auto_ptr</code> totally. The above codes can be rewritten as follows, </p><div class="smallText" id="premain3" style="width: 100%;"><img preid="3" src="singleton.asp_files/minus.gif" id="preimg3" height="9" width="9"><span nd="43" preid="3" style="margin-bottom: 0pt;" id="precollapse3"> Collapse</span></div><pre nd="44" style="margin-top: 0pt;" id="pre3" lang="c++"><span class="cpp-keyword">class</span> PrintQueue {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">void</span> AddJob(PrintJob&amp;);

    <span class="cpp-keyword">static</span> PrintQueue&amp; Instance();

<span class="cpp-keyword">protected</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> PrintQueue() {}
    <span class="cpp-keyword">inline</span> ~PrintQueue() {}

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> Destroy();

<span class="cpp-keyword">private</span> : 
    std::queue<printjob nd="45"> queue_;

    <span class="cpp-keyword">static</span> PrintQueue* instance_;

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> PrintQueue(PrintQueue <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">inline</span> PrintQueue&amp; <span class="cpp-keyword">operator</span>=(PrintQueue <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
};    <span class="cpp-comment">//    end of class PrintQueue </span>

PrintQueue* PrintQueue::instance_ = <span class="cpp-literal">0</span>;

PrintQueue&amp; PrintQueue::Instance() {
    <span class="cpp-keyword">if</span> ( instance_ == <span class="cpp-literal">0</span> ) {
        instance_ = <span class="cpp-keyword">new</span> DerivedPrintQueue();
        std::atexit(Destroy);
    }
    <span class="cpp-keyword">return</span> *instance_;
}
</printjob></pre>
<p nd="46">Note that this doesn&#8217;t make a difference now, since a static <code nd="47">std::auto_ptr</code> would generate similar codes. However, using <code nd="48">atexit</code> actually paths the way to a better Singleton implementation later.</p>
<h2>Singleton with a defined lifespan</h2>
<p nd="49">In an attempt to control destruction order, another implementation has been introduced.</p><div class="smallText" id="premain4" style="width: 100%;"><img preid="4" src="singleton.asp_files/minus.gif" id="preimg4" height="9" width="9"><span nd="50" preid="4" style="margin-bottom: 0pt;" id="precollapse4"> Collapse</span></div><pre nd="51" style="margin-top: 0pt;" id="pre4" lang="c++"><span class="cpp-keyword">class</span> PrintQueue {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">void</span> AddJob(PrintJob&amp;);

    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">static</span> PrintQueue&amp; Instance() { 
        assert(instance_); 
        <span class="cpp-keyword">return</span> *instance_;
    }

<span class="cpp-keyword">protected</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> PrintQueue() {
        assert(instance_ == <span class="cpp-literal">0</span>); 
        instance_ = <span class="cpp-keyword">this</span>;
    }
    <span class="cpp-keyword">inline</span> ~PrintQueue() {
        instance_ = <span class="cpp-literal">0</span>;
    }

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">static</span> PrintQueue* instance_;

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> PrintQueue(PrintQueue <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">inline</span> PrintQueue&amp; <span class="cpp-keyword">operator</span>=(PrintQueue <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
};    <span class="cpp-comment">//    end of class PrintQueue</span>

<span class="cpp-keyword">class</span> DerivedPrintQueue : <span class="cpp-keyword">public</span> PrintQueue {...};

<span class="cpp-keyword">int</span> main() {
    DerivedPrintQueue printer;
    ...
}
</pre>
<p nd="52">With this approach, the destruction time of <code nd="53">DerivedPrintQueue</code> is actually well-defined (before it goes out of scope). At any point of time, if the program needs to use the <code nd="54">PrintQueue</code>, he only needs to call PrintQueue::Instance() , which will return the extended <code nd="55">DerivedPrintQueue</code> instance.</p>
<p nd="56">The drawbacks of this approach, however, are that in the case that <code nd="57">PrintQueue</code> was never used, we have paid for the price of initialization, as well as <code nd="58">PrintQueue::Instance()</code> will still return an invalid object if we attempted to call it in one of our global object&#8217;s destructor.</p>
<h2>Putting it all together, a basic Singleton Template Class</h2>
<p nd="59">After reviewing the previous implementations, we should arrive at some conclusions. 
</p><ul>
<li nd="60">In order to allow extending of the singleton class, we
should use a pointer to the singleton class instead of a static
instance. This also gives us the benefit of not paying the cost of
initialization if we&#8217;re not using it. </li><li nd="61">An option should be provided to control the destruction order, or simply destroy a singleton. 
</li><li nd="62">At times, we would also like to give simply mark certain objects as singleton, and take the last reviewed approach. </li></ul>
<p></p>
<p nd="63">And the result of these conclusions is a template class shown below</p><div class="smallText" id="premain5" style="width: 100%;"><img preid="5" src="singleton.asp_files/minus.gif" id="preimg5" height="9" width="9"><span nd="64" preid="5" style="margin-bottom: 0pt;" id="precollapse5"> Collapse</span></div><pre nd="65" style="margin-top: 0pt;" id="pre5" lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">class</span> Singleton {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">static</span> T&amp; Instance();
    <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> Destroy();

<span class="cpp-keyword">protected</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> Singleton() { 
        assert(Singleton::instance_ == <span class="cpp-literal">0</span>); 
        Singleton::instance_ = <span class="cpp-keyword">static_cast</span>&lt;T*&gt;(<span class="cpp-keyword">this</span>); 
    }
    <span class="cpp-keyword">inline</span> ~Singleton() { 
        Singleton::instance_ = <span class="cpp-literal">0</span>; 
    }

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">static</span> T* CreateInstance();
    <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> ScheduleForDestruction(<span class="cpp-keyword">void</span> (*)());
    <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> DestroyInstance(T*);

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">static</span> T* instance_;

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> Singleton(Singleton <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">inline</span> Singleton&amp; <span class="cpp-keyword">operator</span>=(Singleton <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
};    <span class="cpp-comment">//    end of class Singleton</span>

<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">typename</span> T&amp; Singleton&lt;T&gt;::Instance() {
    <span class="cpp-keyword">if</span> ( Singleton::instance_ == <span class="cpp-literal">0</span> ) {
        Singleton::instance_ = CreateInstance();
        ScheduleForDestruction(Singleton::Destroy);
    }
    <span class="cpp-keyword">return</span> *(Singleton::instance_);
}

<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">void</span> Singleton&lt;T&gt;::Destroy() {
    <span class="cpp-keyword">if</span> ( Singleton::instance_ != <span class="cpp-literal">0</span> ) {
        DestroyInstance(Singleton::instance_);
        Singleton::instance_ = <span class="cpp-literal">0</span>;
    }
}

<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">typename</span> T* Singleton&lt;T&gt;::CreateInstance() {
    <span class="cpp-keyword">return</span> <span class="cpp-keyword">new</span> T();
}

<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">void</span> Singleton&lt;T&gt;::ScheduleForDestruction(<span class="cpp-keyword">void</span> (*pFun)()) {
    std::atexit(pFun);
}

<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">void</span> Singleton&lt;T&gt;::DestroyInstance(T* p) {
    <span class="cpp-keyword">delete</span> p;
}

<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">typename</span> T* Singleton&lt;T&gt;::instance_ = <span class="cpp-literal">0</span>;
</pre>
<p nd="66">Note that the <code nd="67">Destroy</code> function is actually made public. This allows us to destroy the Singleton object explicitly. </p>
<p nd="68">However, be warned that that if the <code nd="69">Destroy </code>function
is public, it holds several implications. Being public, it imposes a
restriction that client can not actually maintain a local reference of
the Singleton object, and all usage of Singleton must goes through the <code nd="70">Singleton::Instance</code>. Because otherwise, the client might actually hold a reference to a destroyed Singleton.</p>
<p nd="71">There is, of course, a second issue, which I will bring up in the next section.</p>
<p nd="72">This seems to be the best Singleton Pattern implementation we can come up with, or is it?</p>
<h2>Resolving the multi-threading issue</h2>
<p nd="73">In an ideal world, everything would have worked. However, we
don&#8217;t live in an ideal world. Thus, Murphy&#8217;s law, &#8220;Everything that can
go wrong, will go wrong&#8221; should be applied whenever possible. Imagine
the following code,</p><pre nd="74" lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">typename</span> Singleton&lt;T&gt;::RefType Singleton&lt;T&gt;::Instance() {
    <span class="cpp-keyword">if</span> ( Singleton::instance_ == <span class="cpp-literal">0</span> ) {              <span class="cpp-comment">//    1</span>
        Singleton::instance_ = CreateInstance();    <span class="cpp-comment">//    2</span>
        ScheduleForDestruction(Singleton::Destroy);
    }
    <span class="cpp-keyword">return</span> *(Singleton::instance_);                 <span class="cpp-comment">//    3</span>
}
</pre>
<p>In an ideal world, the first thread would reach // 1 first, then hit // 2, then // 3 before another thread calls Instance. </p>
<p>But remember, we don&#8217;t live in an ideal world. What would most likely happen would thus be: first thread calls <code>Instance</code>,
reach // 1 first. The if statement would return true, and the first
thread enters // 2. At the same time, the OS might have interrupted the
execution and pass control to the second thread. The second thread
calls Instance, and at this time, the if statement would still return
true, and the second thread enters // 2 as well. Then the second thread
executes // 2, and proceed on to // 3, and the execution was
interrupted again and control returned to the first thread. Then the
first thread executes // 2, overwriting the instance the second thread
created (memory leakage), and proceeds on to // 3.</p>
<p>Of course, whenever multithreading is introduced, we should always
also introduce synchronization measures to ensure the &#8216;correctness&#8217;
state of an application. In this case, a mutex lock should be
introduced. (Please refer to your favorite OS programming reference on
thread synchronization)</p>
<p>A quick solution would produce codes somewhat akin to the one that follows, </p><pre lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">typename</span> Singleton&lt;T&gt;::RefType Singleton&lt;T&gt;::Instance() {
    LockThread lock;                               <span class="cpp-comment">//    1</span>
    <span class="cpp-keyword">if</span> ( Singleton::instance_ == <span class="cpp-literal">0</span> ) {             <span class="cpp-comment">//    2</span>
        Singleton::instance_ = CreateInstance();   <span class="cpp-comment">//    3</span>
        ScheduleForDestruction(Singleton::Destroy);
    }
    <span class="cpp-keyword">return</span> *(Singleton::instance_);                <span class="cpp-comment">//    4</span>
}
</pre>
<p>This implementation falls short of performance as a lock is imposed
even when there apparently is no danger (when if fails). A better
implementation would have been, </p><pre lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">typename</span> Singleton&lt;T&gt;::RefType Singleton&lt;T&gt;::Instance() {
    <span class="cpp-keyword">if</span> ( Singleton::instance_ == <span class="cpp-literal">0</span> ) {              <span class="cpp-comment">//    1</span>
        LockThread lock;                            <span class="cpp-comment">//    2</span>
        Singleton::instance_ = CreateInstance();    <span class="cpp-comment">//    3</span>
        ScheduleForDestruction(Singleton::Destroy);
    }
    <span class="cpp-keyword">return</span> *(Singleton::instance_);                 <span class="cpp-comment">//    4</span>
}
</pre>
<p>Though, the same synchronization issue comes back. For example, the
first thread hits // 1, and before it is about to execute // 2, control
is passed to the second thread&#8230;.</p>
<p>Surprisingly though, a better solution can be derived by merging the above two codes.</p><pre lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">typename</span> Singleton&lt;T&gt;::RefType Singleton&lt;T&gt;::Instance() {
    <span class="cpp-keyword">if</span> ( Singleton::instance_ == <span class="cpp-literal">0</span> ) {
        LockThread lock;
        <span class="cpp-keyword">if</span> ( Singleton::instance_ == <span class="cpp-literal">0</span> ) {
            Singleton::instance_ = CreateInstance();    
            ScheduleForDestruction(Singleton::Destroy);
        }
    }
    <span class="cpp-keyword">return</span> *(Singleton::instance_);
}
</pre>
<p>The new solution would result in quick access for threads that accessed <code>Instance</code> when <code>instance_</code> is valid, and slower access (due to the locks) when <code>instance_</code> is invalid, but those are really rare and one-time cases.</p>
<p>Remember earlier I mentioned that a public <code>Destroy </code>has another 
  implication? Ok, imagine this process. Assuming the Singleton has been created, 
  Thread A calls <code>Singleton::Instance</code>. It tests the instance and finds 
  it valid, then proceed to the return instance statement. Then Thread B comes 
  into the scene. It checks that instance is valid, and proceeds to destroy it(regardless 
  if it's double-checked pattern with a lock or otherwise). After this, control 
  is returned to Thread A again, which attempts to dereference an invalid Singleton 
  instance, and return to the client. From this we can deduce that exposing <code>Destroy 
  </code>for explicit destruction is actually not a viable design decision in 
  a multi-threading environment.</p>
<h2>More on the multi-threading</h2>
<p>The Double-Checked Locking mechanism applied seems to be a perfect solution, 
  except that, in some(or maybe even most) cases, it still do not work<sub>3</sub> as expected. 
  The main reason is because on some systems, the writes to memory can be rearranged, 
  and not be in chronological order. Due to this rearranging of writes, different 
  threads might, at times, have a different 'view' of the current memory. A thread 
  might have made the lock, created the Singleton, unlock, and carried on, while 
  another thread goes in, and see that the instance is still not created, because 
  the system had rearranged the writes and is performing the writes, and has yet 
  to write the new value of the <code>instance_</code> to the memory yet. Aside 
  from this, some processors actually maintain locally cached copies of memory, 
  creating even more problems when you need instant and up to date data.</p>
<p>Other possible solutions are employing up to a Triple-Checked Locking mechanism, 
  or issue an explicit memory barrier instruction (which forces writes to the 
  memory and retrieve new copies).</p>
<h2>Resolving the dead reference issue</h2>
<p>Remember earlier when an example was given with the Singleton
Logging Utility? The incident where after the destruction of a
Singleton, another class object would still wish to get an instance of
the Logging Utility. In such a scenario, what should be the possible
response of a singleton? We can identify the following responses,
either recreate the instance, or throw an exception. </p>
<p>First, however, support has to be built into the Singleton class so
that it can know if a null instance means a dead reference situation,
or simply an uninitialized instance. An additional boolean variable is
introduced to fill the role. The resulting Instance code might look as
follows (remember to add the relevant boolean variable setting to <code>Destroy</code> as well)</p><pre lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">typename</span> Singleton&lt;T&gt;::RefType Singleton&lt;T&gt;::Instance() {
    <span class="cpp-keyword">if</span> ( Singleton::instance_ == <span class="cpp-literal">0</span> ) {
        LockThread lock;
        <span class="cpp-keyword">if</span> ( Singleton::instance_ == <span class="cpp-literal">0</span> ) {
            <span class="cpp-keyword">if</span> ( Singleton::destroyed_ ) {
                OnDeadReference();
                Singleton::destroyed_ = <span class="cpp-keyword">false</span>;
            }
            Singleton::instance_ = CreateInstance();
            ScheduleForDestruction(Singleton::Destroy);
        }
    }
    <span class="cpp-keyword">return</span> *(Singleton::instance_);
}
</pre>
<p>The implementation of <code>OnDeadReference</code> could contain codes to throw an exception, or simply an empty function so we can recreate the Singleton for usage.</p>
<h2>Redesign the template Singleton for extensibility, A Loki<sup>1</sup> Design</h2>
<p>Given the above implementations, we could actually identify certain policies<sup>2</sup> to define the behavior of a Singleton. They are namely, 
</p><ol>
<li>Creation. Could be either a normal invocation of new operator, a static object, or even an empty policy. 
</li><li>Lifetime. Could be the normal LIFO sequence with atexit,
recurring, or an empty policy (for use with creation of Singleton on
the stack in main, for example) </li><li>ThreadingModel. Could be single-threaded, where no locks are implemented, or multi-threaded. </li></ol>
<p></p>
<p>A single-threaded model policy might look like the following, </p><div class="smallText" id="premain11" style="width: 100%;"><img preid="11" src="singleton.asp_files/minus.gif" id="preimg11" height="9" width="9"><span preid="11" style="margin-bottom: 0pt;" id="precollapse11"> Collapse</span></div><pre style="margin-top: 0pt;" id="pre11" lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">class</span> SingleThreaded {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">typedef</span> T VolatileType;

<span class="cpp-keyword">protected</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> SingleThreaded() {}
    <span class="cpp-keyword">inline</span> ~SingleThreaded() {}

<span class="cpp-keyword">protected</span> : 
    <span class="cpp-keyword">class</span> LockThread {
    <span class="cpp-keyword">public</span> : 
        <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> LockThread() {
            SingleThreaded::Lock();
        }
        <span class="cpp-keyword">inline</span> ~LockThread() { 
            SingleThreaded::Unlock(); 
        }

    <span class="cpp-keyword">private</span> : 
        <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> LockThread(LockThread <span class="cpp-keyword">const</span>&amp;) {}
        <span class="cpp-keyword">inline</span> LockThread&amp; <span class="cpp-keyword">operator</span>=(LockThread <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
    };    <span class="cpp-comment">//    end of class LockThread</span>

<span class="cpp-keyword">private</span> : 
    friend LockThread;

    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> Lock() {}
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> Unlock() {}

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> SingleThreaded(SingleThreaded <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">inline</span> SingleThreaded&amp; <span class="cpp-keyword">operator</span>=(SingleThreaded <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
};    <span class="cpp-comment">//    end of class SingleThreaded</span>
</pre>
<p>followed by a default life time (FILO) policy,</p><pre lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">class</span> DefaultLifetime {
<span class="cpp-keyword">protected</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> DefaultLifetime() {}
    <span class="cpp-keyword">inline</span> ~DefaultLifetime() {}

    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> OnDeadReference() { 
        <span class="cpp-keyword">throw</span> std::logic_error(<span class="cpp-string">"Dead Reference Detected"</span>); 
    }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> ScheduleForDestruction(<span class="cpp-keyword">void</span> (*pFun)()) {
        std::atexit(pFun); 
    }

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> DefaultLifetime(DefaultLifetime <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">inline</span> DefaultLifetime&amp; <span class="cpp-keyword">operator</span>=(DefaultLifetime <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
};    <span class="cpp-comment">//    end of class DefaultLifetime</span>
</pre>
<p>And the creation/destruction policy,</p><pre lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">class</span> CreateUsingNew {
<span class="cpp-keyword">protected</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> CreateUsingNew() {}
    <span class="cpp-keyword">inline</span> ~CreateUsingNew() {}

    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">static</span> T* CreateInstance() { <span class="cpp-keyword">return</span> <span class="cpp-keyword">new</span> T(); }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> DestroyInstance(T* t) { <span class="cpp-keyword">delete</span> t; }

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> CreateUsingNew(CreateUsingNew <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">inline</span> CreateUsingNew&amp; <span class="cpp-keyword">operator</span>=(CreateUsingNew <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
};    <span class="cpp-comment">//    end of class CreateUsingNew</span>
</pre>
<p>The Singleton class template that uses the above mentioned policies would thus look as follows, </p><div class="smallText" id="premain14" style="width: 100%;"><img preid="14" src="singleton.asp_files/minus.gif" id="preimg14" height="9" width="9"><span preid="14" style="margin-bottom: 0pt;" id="precollapse14"> Collapse</span></div><pre style="margin-top: 0pt;" id="pre14" lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> CreationPolicy = CreateUsingNew&lt;T&gt;, 
<span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> LifetimePolicy = DefaultLifetime, 
<span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> ThreadingModel = SingleThreaded&gt;
<span class="cpp-keyword">class</span> Singleton : <span class="cpp-keyword">public</span> CreationPolicy, <span class="cpp-keyword">public</span> LifetimePolicy&lt;T&gt;, <span class="cpp-keyword">public</span> ThreadingModel&lt;T&gt; {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">static</span> T&amp; Instance();
    <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> Destroy();

<span class="cpp-keyword">protected</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> Singleton() { 
        assert(Singleton::instance_ == <span class="cpp-literal">0</span>); 
        Singleton::instance_ = <span class="cpp-keyword">static_cast</span>&lt;T*&gt;(<span class="cpp-keyword">this</span>); 
        Singleton::destroyed_ = <span class="cpp-keyword">false</span>; 
    }
    <span class="cpp-keyword">inline</span> ~Singleton() { 
        Singleton::instance_ = <span class="cpp-literal">0</span>; 
        Singleton::destroyed_ = <span class="cpp-keyword">true</span>; 
    }

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">static</span> VolatileType* instance_;
    <span class="cpp-keyword">static</span> <span class="cpp-keyword">bool</span> destroyed_;

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> Singleton(Singleton <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">inline</span> Singleton&amp; <span class="cpp-keyword">operator</span>=(Singleton <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
};    <span class="cpp-comment">//    end of class Singleton</span>

<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> C, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> L, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> T&gt;
<span class="cpp-keyword">typename</span> T&amp; Singleton&lt;T, C, L, T&gt;::Instance() {
    <span class="cpp-keyword">if</span> ( Singleton::instance_ == <span class="cpp-literal">0</span> ) {
        LockThread lock;
        <span class="cpp-keyword">if</span> ( Singleton::instance_ == <span class="cpp-literal">0</span> ) {
            <span class="cpp-keyword">if</span> ( Singleton::destroyed_ ) {
                OnDeadReference();
                Singleton::destroyed_ = <span class="cpp-keyword">false</span>;
            }
            Singleton::instance_ = CreateInstance();
            <span class="cpp-keyword">try</span> {
                ScheduleForDestruction(Singleton::Destroy);
            } <span class="cpp-keyword">catch</span>(...) {
                DestroyInstance(Singleton::instance_);
            }        
        }
    }
    <span class="cpp-keyword">return</span> *(Singleton::instance_);
}

<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> C, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> L, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> T&gt;
<span class="cpp-keyword">void</span> Singleton&lt;T, C, L, T&gt;::Destroy() {
    <span class="cpp-keyword">if</span> ( Singleton::instance_ != <span class="cpp-literal">0</span> ) {
        LockThread lock;
        <span class="cpp-keyword">if</span> ( Singleton::instance_ != <span class="cpp-literal">0</span> ) {
            DestroyInstance(Singleton::instance_);
            Singleton::instance_ = <span class="cpp-literal">0</span>;
            Singleton::destroyed_ = <span class="cpp-keyword">true</span>;
        }
    }
}

<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> C, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> L, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> T&gt;
<span class="cpp-keyword">typename</span> Singleton&lt;T, C, L, T&gt;:: VolatileType* Singleton&lt;T, C, L, T&gt;::instance_ = <span class="cpp-literal">0</span>;
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> C, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> L, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> T&gt;
<span class="cpp-keyword">bool</span> Singleton&lt;T, C, L, T&gt;::destroyed_ = <span class="cpp-keyword">false</span>;
</pre>
<p>This time, the implementation of the <code>Singleton</code> allows it to be easily extensible. With different policies, the same codes can be tailored to create a new <code>Singleton</code> with different behavior.</p>
<h2>Sample usage</h2>
<p>The <code>Singleton</code> template class can be used in two forms, namely,</p>
<pre lang="c++"><span class="cpp-keyword">class</span> A : <span class="cpp-keyword">public</span> Singleton&lt;A&gt; {...};
A::Instance().DoSomething();
</pre><a></a><a></a><a>
</a><p><a>as well as </a></p>
<pre lang="c++"><span class="cpp-keyword"><a>class</a></span><a> A {...};
Singleton&lt;A&gt;::Instance().DoSomething();
</a></pre>
<h2><a>Additional implementations</a></h2>
<p><a>The current implementation of <code>Singleton</code> can only call the default constructor of the <code>Singleton</code>
class, and at times, we would actually like to specific additional
arguments and call an overloaded constructor. Actually this can be
easily achieved, by simply providing a newly defined <code>CreationPolicy</code>. The example <code>CreationPolicy</code> is as followed</a></p><pre lang="c++"><span class="cpp-keyword"><a>class</a></span><a> Test {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">explicit</span> Test(<span class="cpp-keyword">char</span> <span class="cpp-keyword">const</span>*);
    ...
};    <span class="cpp-comment">//    end of class Test</span>

<span class="cpp-keyword">class</span> TestCreator {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> SetString(<span class="cpp-keyword">char</span> <span class="cpp-keyword">const</span>* str) { 
        str_ = str;
    }

<span class="cpp-keyword">protected</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> TestCreator() {}
    <span class="cpp-keyword">inline</span> ~TestCreator() {}

    <span class="cpp-comment">//    creation/destruction/storage issues</span>
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">static</span> Test* CreateInstance() { <span class="cpp-keyword">return</span> <span class="cpp-keyword">new</span> Test(str_); }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">static</span> <span class="cpp-keyword">void</span> DestroyInstance(Test* t) { <span class="cpp-keyword">delete</span> t; }

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">static</span> std::string str_;

<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> TestCreator(TestCreator <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">inline</span> TestCreator&amp; <span class="cpp-keyword">operator</span>=(TestCreator <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> *<span class="cpp-keyword">this</span>; }
};    <span class="cpp-comment">//    end of class TestCreator</span>
</a></pre>
<p><a>By providing <code>TestCreator</code> as the <code>CreationPolicy</code> template parameter of Singleton, we can simply call <code>Singleton&lt;Test&gt;::SetString(someValue)</code>, and then <code>Singleton&lt;Test&gt;::Instance</code> will invoke the constructor <code>Test(someValue)</code>.</a></p>
<p><a>And that is why the <code>CreationPolicy</code> template parameter for <code>Singleton</code> was not declared as a template class; to facilitate custom constructor calling.</a></p>
<h2><a>Runtime Polymorphism</a></h2>
<p><a>At times, during the application runtime, the application might not be satisfied with simply the same <code>Singleton</code> instances. The application might actually wish to replace the existing <code>Singleton</code> instance with its extended type, to be used in future operations.</a></p>
<p><a>Since the <code>Singleton</code> stores a pointer to the
instance, it already supports this functionality. The pointer can not
only point to the parent object, but derived types as well. Below is
the initial implementation of the function that exposes such
functionality.</a></p><pre lang="c++"><span class="cpp-keyword"><a>template</a></span><a>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> C, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> L, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> T&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">void</span> Singleton&lt;T, C, L, T&gt;::Reset(T* p) {
LockThread lock;
    <span class="cpp-keyword">if</span> ( Singleton::instance_ != <span class="cpp-literal">0</span> ) {
        DestroyInstance(Singleton::instance_);
        Singleton::instance_ = <span class="cpp-literal">0</span>;
    }
    Singleton::instance_ = p;
    ScheduleForDestruction(Singleton::Destroy);
}
</a></pre>
<p><a>At first glance, it seems to fulfill all our needs. It performs a
lock, destroys the existing instance if any, and sets the instance to
point to the new instance.</a></p>
<p><a>In this case, what happens when the application ends, and the
scheduled program terminates? Since the behavior is determined by the
Lifetime policy, as well as the Creation policy, we will not know what
would happen. A default behavior of deleting the instance might be
wrong, since the instance could be allocated on the stack. Hence, if
the user should choose to reset the <code>Singleton</code>, it would
therefore be logical for him to be responsible for the object cleaning
up. A simple solution would be for the user to simply pass in a clean
up function as well, so that it can be called upon <code>Destroy</code>. The improved version of <code>Reset</code> and <code>Destroy</code> is shown below, </a></p><pre lang="c++"><span class="cpp-keyword"><a>template</a></span><a>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> C, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> L, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> T&gt;
<span class="cpp-keyword">void</span> Singleton&lt;T, C, L, T&gt;::Reset(T* p, <span class="cpp-keyword">void</span> (*pFun)(T*)) {
    LockThread lock;
    <span class="cpp-keyword">if</span> ( Singleton::instance_ != <span class="cpp-literal">0</span> ) {
        DestroyInstance(Singleton::instance_);
    } <span class="cpp-keyword">else</span> <span class="cpp-keyword">if</span> ( p != <span class="cpp-literal">0</span> ) {
        ScheduleForDestruction(Singleton::Destroy);
    }
    Singleton::instance_ = p;
    Singleton::pFun_ = pFun;
}

<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> C, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> L, <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span>&gt; <span class="cpp-keyword">class</span> T&gt;
<span class="cpp-keyword">void</span> Singleton&lt;T, C, L, T&gt;::Destroy() {
    <span class="cpp-keyword">if</span> ( Singleton::instance_ != <span class="cpp-literal">0</span> ) {
        LockThread lock;
        <span class="cpp-keyword">if</span> ( Singleton::instance_ != <span class="cpp-literal">0</span> ) {
            <span class="cpp-keyword">if</span> (  Singleton::pFun_ != <span class="cpp-literal">0</span> ) {
                Singleton::pFun_(Singleton::instance_);
            } <span class="cpp-keyword">else</span> {
                DestroyInstance(Singleton::instance_);
            }
            Singleton::instance_ = <span class="cpp-literal">0</span>;
            Singleton::destroyed_ = <span class="cpp-keyword">true</span>;
        }
    }
}
</a></pre>
<p><a>where <code>pFun_</code> is of a member of <code>Singleton</code> of the below form,</a></p><pre lang="c++"><span class="cpp-keyword"><a>static</a></span><a> <span class="cpp-keyword">void</span> (*pFun_)(T*);
</a></pre>
<p><a>It seems to work well, and perfect, or is it? Except with this
new feature, we have to impose a limitation on ourselves, to not use
the form, </a></p>
<pre lang="c++"><span class="cpp-keyword"><a>class</a></span><a> A : <span class="cpp-keyword">public</span> Singleton&lt;A&gt; {...};
<span class="cpp-keyword">class</span> B : <span class="cpp-keyword">public</span> A {...};

A::Instance().DoSomething();
</a></pre>
<p><a>Recall that in the <code>Singleton</code>&#8217;s constructor, instance_ is verified to be null, and later <code>instance_</code> is set to <code><span class="cpp-keyword">this</span></code>. This is actually the cause of our new problem(pun intended).</a></p>
<p><a>Imagine the following program execution sequence A is constructed, via <code>Instance</code> using new. Application decides to change the A&#8217;s instance to B instead, and calls <code>Reset(<span class="cpp-keyword">new</span> B, &#8230;)</code>.
At the instantiation of B, instance is no longer null, and assertion
fails. Program terminates. The world no longer looks as bright.</a></p>
<p><a>There is no quick workarounds. We could impose a limitation on ourselves to use </a></p>
<pre lang="c++"><a>Singleton&lt;A&gt;::Instance().DoSomething();
Singleton&lt;A&gt;::Reset(<span class="cpp-keyword">new</span> B, ...);
</a></pre>
<p><a>Or we could also remove the assertion checks and assignment in
the constructor, or we could simply introduce a new policy to determine
the behavior (left as an exercise for the reader).</a></p>
<h2><a>Implications of Runtime Polymorphism</a></h2>
<p><a>So we've added runtime polymorphism to the implementations. Next we have to understand the implications. </a></p>
<p><a>As with <code>Destroy</code>, <code>Reset </code>would result in unsafe multi-threading codes. For one, the client can no longer be sure that their locally kept copies of <code>Singleton </code>object to be valid. A second point brought up was that, in the case of multithreading, imagine a thread calls <code>Instance</code>, and another calls <code>Reset</code>,
when instance is already valid.&nbsp; The first thread tested instance,
and since is valid, proceeds to the return instance code. Just as the
function returns the instance to the client, and before the client
performs the actual Singleton operation,&nbsp;execution is interrupted,
and control transferred to the second thread. The second thread perform
a lock, destroys the current instance, and assigned a new instance.
Control is then returned to the first thread, which is operating on an
invalid instance.</a></p>
<p><a>Obviously, <code>Reset </code>might be a handy and interesting function to have, but as with <code>Destroy</code>,
it actually results in code that is not multithreading safe. Of course,
we could actually do some template metaprogramming which hides Reset
and Destroy if the threading policy is Multi-threading, and review them
if otherwise. But this is a design decision which you must decide if
you really need to use <code>Reset </code>and <code>Destroy,</code> since they seem to exploit the undefined rules of a Singleton Pattern.</a></p>
<h2><a>Conclusion</a></h2>
<p><a>If you had to declare global variables, chances are you would be
better off with a Singleton Pattern implementation. And reviewing the
various implementations out there, Loki&#8217;s implementation seems to be
the most robust, extensible Singleton Pattern implementation. However,
my proposed implementation builds upon Loki&#8217;s pattern, and address
following additional issues </a></p><ol>
<li><a>Allows stack creation of a Singleton object and be used any/every where in an application 
</a></li><li><a>Notice the try catch block in my implementation of
Instance, which Loki lacks. Being an unknown policy, we cannot make
assumptions that ScheduleForDestruction will never throw, since we
would not know what exactly happens in it. If ScheduleForDestruction do
throw, there would be no proper way to clean up the allocated
instance_, short of a manual call of Destroy. </a></li><li><a>Allows runtime changes of the Singleton&#8217;s internal instance, enabling further polymorphism. </a></li></ol>
<p><a>However, one should not take the code explained and given as-it-is. The code, 
  although addresses multi-threading, is not complete in its design. If you are 
  using the Singleton class in a multi-threading environment, you should check 
  up on the best available locking mechanism you have, and modify the codes. To 
  use the Singleton 'correctly', you would need to come up with a set of restrictions 
  and limits to impose yourself, and the way to use it.</a></p>
<p><a>Decomposing a problem into its most generic form, and applying
policies on the generic form, can yield extremely surprising amount of
code reuse, as well as code usability.</a></p>
<p><a>With the creation policy pattern, we can even further customize
the construction of the Singleton objects, a feature often overlooked
by most implementation. (Note, you can even further decompose the
Creation Policy into a Storage Policy, which takes care of memory
allocation and deallocation, and a Construction Policy)</a></p>
<h2><a>Footnotes</a></h2>
<p><a><b><sup>1</sup></b> Loki is the library described in Modern C++ Design, Alexandrescu</a></p>
<p><a><b><sup>2</sup></b> A policy defines a class interface or class
template interface. Policies are similar to traits, but differ in that
they place more emphasis on behavior than type. Policy can also be
described as the Strategy pattern [GOF], except that policies are
compile time bound. [Alexandrescu 2001]</a></p>
<p><a><b><sup>3</sup></b> </a><a href="http://www.cs.umd.edu/%7Epugh/java/memoryModel/DoubleCheckedLocking.html">The 
  "Double-Checked Locking is Broken" Declaration</a> provided by Julian 
  Brown</p>
<h2>References</h2>
<p>[GOF]: Erich Gamma, Richard Helm, Ralph Johnson &amp; John Vlissides, <i>Design Patterns: Elements of Reusable Object-Oriented Software</i>. Addison-Wesley Pub Co, 1995</p>
<p>[Meyers 1996b]: Scott Meyers, <i>More Effective C++: 35 New Ways to Improve Your Programs and Designs</i>. Addison-Wesley Pub Co, 1995</p>
<p>[Alexandrescu 2001]: Andrei Alexandrescu, <i>Modern C++ Design: Generic Programming and Design Patterns Applied</i>. Addison-Wesley Pub Co, 2001 </p>
<h2>History</h2>
<p>21th August 2003: More on the multi-threading, as well as updated conclusion.</p>
<p>13th August 2003: Risks of having Destroy and Reset in a multi-threading environment, 
  as well as definition of Singleton updated.</p>
<p>12th August 2003: Initial version uploaded.</p>





<!-- Article Ends -->



</div>
</span>

<script type="text/javascript" src="singleton.asp_files/togglePre.js"></script>

<h2>Lai Shiaw San Kent</h2>
<div style="overflow: hidden;"><table border="0"><tbody><tr valign="top"><td class="smallText" nowrap="nowrap"><br></td><td class="smallText"><p class="smallText">Click <a href="http://www.codeproject.com/script/profile/whos_who.asp?vt=arts&amp;id=203178">here</a> to view Lai Shiaw San Kent's online profile.</p></td></tr></tbody></table></div><br>
<table border="0" cellpadding="4" width="100%"><tbody><tr valign="top">
<td width="100%"><h2>Other popular C++ / MFC articles:</h2><ul><li><a href="http://www.codeproject.com/cpp/FastDelegate.asp">Member Function Pointers and the Fastest Possible C++ Delegates</a><div class="smallText">A comprehensive tutorial on member function pointers, and an implementation of delegates that generates only two ASM opcodes!</div></li><li><a href="http://www.codeproject.com/cpp/exceptionhandler.asp">How a C++ compiler implements exception handling</a><div class="smallText">An indepth discussion of how VC++ implements exception handling. Source code includes exception handling library for VC++.</div></li><li><a href="http://www.codeproject.com/cpp/Differentiation.asp">Symbolic Differentiation</a><div class="smallText">This article demonstrates differentiating expressions using a stack and displaying the input expression and its derivative.</div></li><li><a href="http://www.codeproject.com/cpp/pointers.asp">A Beginner's Guide to Pointers</a><div class="smallText">An article showing the use of pointers in C and C++</div></li></ul></td>
<td width="360">
<script language="javascript">document.write("<IFRAME src=\"/script/ann/ServeHTML.aspx?C=False&id=2323&cb=2006721\" border=0 frameborder=0 scrolling=no width=300 height=250></IFRAME>");</script><iframe src="singleton.asp_files/ServeHTML.htm" border="0" frameborder="0" height="250" scrolling="no" width="300"></iframe>
</td>
</tr></tbody></table>

		<form action="/script/rating/code/app/insert_vote.asp" method="post">
		<input name="vote_name" value="singleton/cpp8/12/2003" type="hidden">
		<input name="goal" value="/cpp/singleton.asp" type="hidden">

<table bgcolor="#ff9900" border="0" cellpadding="1" cellspacing="0" width="100%">
<tbody><tr><td width="100%">
<table bgcolor="#fbedbb" border="0" cellpadding="4" cellspacing="0" width="100%"><tbody><tr>
<td class="smalltext" valign="middle">[<a href="#__top">Top</a>]</td>
<td align="right" nowrap="nowrap" valign="middle">
<i><b>Rate this Article for us!</b></i>&nbsp;&nbsp;&nbsp;&nbsp; <i>Poor</i><input value="1" name="rate" type="radio"><input value="2" name="rate" type="radio"><input value="3" name="rate" type="radio"><input value="4" name="rate" type="radio"><input value="5" name="rate" type="radio"><i>Excellent</i>&nbsp;&nbsp;<input value="Vote" class="FormButton" type="submit">
</td></tr>
</tbody></table></td></tr></tbody></table>
</form>
<center>
<table border="0" cellpadding="0" cellspacing="0"><tbody><tr>
<td style="padding: 2px; background-color: rgb(238, 238, 238);" height="60" width="120"><div align="center">
<script language="javascript">document.write("<a href=\"/script/admentor/admentorredir.asp?id=2245&way=ban\" target=_blank><img src=\"/script/ann/ServeImg.aspx?File=%2Fscript%2Fadmentor%2Fimages%2FToolbox%5F120x60%2Egif&C=False&id=2245&cb=2006724\" alt=\"\" border=0 width=120 height=60></a>");</script><a href="http://www.codeproject.com/script/admentor/admentorredir.asp?id=2245&amp;way=ban" target="_blank"><img src="singleton.asp_files/ServeImg_004.htm" alt="" border="0" height="60" width="120"></a>
</div></td>
<td width="100">&nbsp;</td>
<td height="60" width="468"><span id="AdBanner5"><script language="javascript">document.write("<a href=\"/script/admentor/admentorredir.asp?id=2248&way=ban\" target=_blank><img src=\"/script/ann/ServeImg.aspx?File=%2Fscript%2Fadmentor%2Fimages%2FToolbox%5F468x60%2Egif&C=False&id=2248&cb=2006711\" alt=\"\" border=0 width=468 height=60></a>");</script><a href="http://www.codeproject.com/script/admentor/admentorredir.asp?id=2248&amp;way=ban" target="_blank"><img src="singleton.asp_files/ServeImg_003.htm" alt="" border="0" height="60" width="468"></a></span></td>
</tr></tbody></table></center>

<a name="__comments"></a>

<script language="JavaScript">

function MsgVoteForm(MemberID, MsgID)
{
	document.write("<span id=\"MVF" + MsgID + "\">");
	document.write("Rate this message: ");
	for (var i=1; i<=5;i++)
	{
		document.write("<a href='#xx" + MsgID.toString() + "xx' title='give this message a vote of " + i.toString());
		document.write("' onclick='return RateMsg(" + MemberID.toString() + ", " + MsgID.toString() + ", ");
		document.write(i.toString() + ")'><b>" + i.toString() + "</b></a> ");
	}
	document.write(" (out of 5)");
	document.writeln("</span>");
	
	document.write("<br />Report as <a href='#xx" + MsgID.toString() + "xx' title='Mark as Spam' onclick='return ReportMsg(" + MemberID.toString());
	document.writeln(", " + MsgID.toString() + ",-1)'>Spam</a> or ");
	document.write("<a href='#xx" + MsgID.toString() + "xx' title='Mark as Abuse' onclick='return ReportMsg(" + MemberID.toString());
	document.writeln(", " + MsgID.toString() + ",-2)'>Abuse</a>");
}

function RetypeForm(MemberID, MsgID)
{
	var types = [
				 {pic:'news_general.gif',  id: 1},
	             {pic:'news_info.gif',     id: 2},
	             {pic:'news_question.gif', id: 4},
	             {pic:'news_answer.gif',   id: 8},
	             {pic:'news_game.gif',     id: 16},
	             {pic:'news_spam.gif',     id: 32}
	            ];
	
	document.write("<span id=\"RTF" + MsgID + "\">");
	for (var i=0;i<types.length;i++)
	{
		document.write("<a href='/script/comments/retype?msg=" + MsgID.toString());
		document.write("&mid=" + MemberID.toString() + "&type=" + types[i].id + "'>");
		document.write("<img border=0 src='/script/images/" + types[i].pic + "'></a><br />");
	}
	document.writeln("</span>");
}

function ReportMsg(userid, msgid, score)
{
	if (confirm("Are you sure you want to report this message?") == true)
		return RateMsg(userid, msgid, score);
	else return false;
}


function RateMsg(userid, msgid, score)
{

   var req = new XMLHttpRequest();

   req.onreadystatechange = function()
   {
      if ( req.readyState == 4 )
      {
         if ( req.status == 200 )
         {
         	var respText = req.responseText;
         	var re = new RegExp("\<div\>([^\<]*)\</div\>", "g");
         	var match = re.exec(respText);
         	status.innerHTML = "<b>" + (match)?match[1]:"An error occured" + "</b>";
         }
         else
         {
            status.innerHTML = "<b style='color:red'>Failed!" + req.statusText + "</b>";
         }
      }
   }
   
   var status = document.getElementById("MVF" + msgid);
   if (!status) return;  // should never happen...   
   status.innerHTML = "<b style='color:green'>Voting...</b>";
   
   var strAction = "/script/comments/vote.asp?js=1&user="+userid+"&msg="+msgid+"&score="+score;
   req.open("GET", strAction, true);
   req.send(null);
   return false;
}

</script>


<script language="JavaScript">
var Selected = "";

var AdTime = new Date();


// Ensures the expanded message appears reasonably close to where 
// it should appear: on screen, and if possible, under the mouse cursor.
function SwitchMessage(e)
{
   if ( !e ) e = window.event;
   var target = e.target ? e.target : e.srcElement;

   // is it a post?
   while ( target && target.id != 'DynMessLink' )
      target = target.parentNode;
   if ( !target || target.id != 'DynMessLink' )
      return;

   if (Selected)
   {
      var body = document.getElementById(Selected + "_h1");
      if (body)
         body.style.display = 'none';
      var head = document.getElementById(Selected + "_h0");
      if (head)
         head.bgColor = '#FEF9E7';
   }

   if (Selected == target.name) // just collapse
      Selected="";
   else
   {
      Selected = target.name;
      var body = document.getElementById(Selected + "_h1");
      if (body)
      {
         if (body.style.display=='none')
            body.style.display='';
         else
            body.style.display = 'none';
      }
      var head = document.getElementById(Selected + "_h0");
      if (head)
         head.bgColor = '#99CCFF';

      if ( body && head && body.style.display != 'none' )
      {
         // the bit that keeps the post on-screen and under the cursor
         //var dif = (getRealPos(head, "Top") + head.offsetHeight/2) - (document.body.scrollTop+e.clientY);
         //document.body.scrollTop += dif;
         document.body.scrollTop = getRealPos(head, "Top") - document.body.clientHeight/10;
         EnsureMessageVisible(target.name, true);
      }
   }

   if ( e.preventDefault )
      e.preventDefault();
   else
      e.returnValue = false;
   return false;
}

// does its best to make a message visible on-screen (vs. scrolled off somewhere).
function EnsureMessageVisible(msgID, bShowTop) {
   var msgHeader = document.getElementById(msgID + "_h0");
   var msgBody = document.getElementById(msgID + "_h1");

   // determine scroll position of top and bottom
   var scrollContainer = document.body;
   var top = getRealPos(msgHeader, 'Top');
   var bottom = getRealPos(msgBody, 'Top') + msgBody.offsetHeight;

   // if not already visible, scroll to make it so
   if ( scrollContainer.scrollTop > top && !bShowTop)
      scrollContainer.scrollTop = top - document.body.clientHeight/10;
   if ( scrollContainer.scrollTop+scrollContainer.clientHeight < bottom )
      scrollContainer.scrollTop = bottom-scrollContainer.clientHeight;
   if ( scrollContainer.scrollTop > top && bShowTop)
      scrollContainer.scrollTop = top - document.body.clientHeight/10;
}

// utility
function getRealPos(i,which)
{
   iPos = 0
   while (i!=null)
   {
      iPos += i["offset" + which];
      i = i.offsetParent;
   }
   return iPos
}


</script>
<div id="_MessageBoard" onclick="SwitchMessage(event)"><table bgcolor="#ff9900" border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td width="100%"><table id="ForumTable" bgcolor="#ff9900" border="0" cellpadding="0" cellspacing="1" width="100%"><form action="/script/comments/app/do_filtermessages.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477" method="post"></form><tbody><tr><td><table bgcolor="white" border="0" cellpadding="3" cellspacing="0" width="100%"><tbody><tr bgcolor="#fbedbb"><td class="smalltext" nowrap="nowrap"><a href="http://www.codeproject.com/script/comments/faq.asp"><img src="singleton.asp_files/forum_faq.GIF" align="absmiddle" border="0" height="16" width="16"> <b>FAQ</b></a>&nbsp;</td><td class="smalltext" align="right" nowrap="nowrap" valign="top">Message score threshold <select size="1" name="noise" class="smalltext"><option value="1">1.0 </option>
<option value="2">2.0</option>
<option selected="selected" value="3">3.0</option>
<option value="4">4.0</option>
<option value="5">5.0</option>
</select>&nbsp;&nbsp;</td><td class="smalltext" colspan="2" align="right" nowrap="nowrap" valign="middle"><a href="http://www.codeproject.com/script/comments/search_comments.asp?forumid=16477"><img src="singleton.asp_files/forum_search.gif" border="0" height="15" width="16"> Search comments</a> &nbsp;</td><td align="right" valign="top"><input value="Set Options" name="submit" class="FormButton" type="submit"></td></tr><tr bgcolor="#ff9900"><td width="100%">&nbsp;</td><td class="smalltext" align="right" nowrap="nowrap" valign="top">View <select size="1" name="expand" class="smalltext"><option value="0">Normal (slow)</option>
<option value="2">Preview (slow)</option>
<option selected="selected" value="5">Message View</option>
<option value="6">Topic View</option>
<option value="1">Thread View</option>
<option value="3">Expanded (Supporters only)</option>
</select>&nbsp;&nbsp;</td><td class="smalltext" nowrap="nowrap" valign="top">Per page <select size="1" name="perpage" class="smalltext"><option value="10">10</option>
<option selected="selected" value="25">25</option>
<option value="50">50</option>
</select></td><td colspan="2">&nbsp;</td></tr></tbody></table>
</td></tr><tr bgcolor="#fbedbb"><td><a name="xx0xx"></a><table bgcolor="#fbedbb" border="0" cellpadding="2" width="100%"><tbody><tr><td class="messagetitle"><img src="singleton.asp_files/forum_newmsg.gif" align="top" border="0" height="16" width="16"><a href="http://www.codeproject.com/script/comments/user_new.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477" class="HoverLink" target="_top" name="HoverNL" title="Add a new message to the discussions"><b>New Message</b></a></td><td class="messagetitle">Msgs 1 to 25 of 31 (Total: 31) (<a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477">Refresh</a>)</td><td align="right" nowrap="nowrap"><font class="messagetitle"><span class="HoverLink">First</span> <span class="HoverLink">Prev</span> <a class="HoverLink" name="HoverNL" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;fr=26">Next</a> <span class="HoverLink">&nbsp;&nbsp;&nbsp;&nbsp;</span> </font></td></tr></tbody></table>
</td></tr><tr bgcolor="white"><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2" bgcolor="#fbedbb" width="70%"><table border="0" cellpadding="2" cellspacing="0" width="100%"><tbody><tr><td class="messagetitle">Subject&nbsp;</td></tr></tbody></table></td><td bgcolor="#fbedbb" width="140"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/t.gif" border="0" height="1" width="1"></td></tr><tr><td class="messagetitle">Author&nbsp;</td></tr><tr><td><img src="singleton.asp_files/t.gif" border="0" height="1" width="1"></td></tr></tbody></table></td><td bgcolor="#fbedbb" width="12%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/t.gif" border="0" height="1" width="1"></td></tr><tr><td class="messagetitle" align="right">Date&nbsp;</td></tr><tr><td><img src="singleton.asp_files/t.gif" border="0" height="1" width="1"></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr id="1238044_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx1238044xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="1238044" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=1238044#xx1238044xx"><b>to write a cpp code using singleton class</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><img src="singleton.asp_files/usersuss.gif" alt="Unconfirmed/Anonymous posting" height="13" width="15">&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>Anonymous</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>8:40 27 Sep '05</b>&nbsp;</font></td></tr>
<tr id="1238044_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">can u pls help me in writing a code using singleton classes. <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1238044" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=1238044&amp;forumid=16477&amp;select=1238044#xx1238044xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=1238044#xx1238044xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right">[<a href="http://www.codeproject.com/script/comments/owner_modify_pw.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1238044">Modify</a> | <a href="http://www.codeproject.com/script/comments/owner_delete_pw.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1238044">Delete</a>]<br>Score: 1.0 (1 vote).  <script language="Javascript">MsgVoteForm(0,1238044);</script><span id="MVF1238044">Rate this message: <a href="#xx1238044xx" title="give this message a vote of 1" onclick="return RateMsg(0, 1238044, 1)"><b>1</b></a> <a href="#xx1238044xx" title="give this message a vote of 2" onclick="return RateMsg(0, 1238044, 2)"><b>2</b></a> <a href="#xx1238044xx" title="give this message a vote of 3" onclick="return RateMsg(0, 1238044, 3)"><b>3</b></a> <a href="#xx1238044xx" title="give this message a vote of 4" onclick="return RateMsg(0, 1238044, 4)"><b>4</b></a> <a href="#xx1238044xx" title="give this message a vote of 5" onclick="return RateMsg(0, 1238044, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx1238044xx" title="Mark as Spam" onclick="return ReportMsg(0, 1238044,-1)">Spam</a> or 
<a href="#xx1238044xx" title="Mark as Abuse" onclick="return ReportMsg(0, 1238044,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="1143933_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx1143933xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="1143933" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=1143933#xx1143933xx"><b>What´s the currency in "not paying for what we don&#8217;t use"?</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=1320624"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>tpolzin</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>4:32 23 Jun '05</b>&nbsp;</font></td></tr>
<tr id="1143933_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">You claim that Meyer´s implementation "does manage to solve the problem of not paying for what we don&#8217;t use".<br><br>What exactly do you mean with cost? <br><br>Cost of initialization? Well, when I test it, "PrintQueue" is only initialized when PrintQueue is used.<br><br>The
only "cost" I see is that there will be some empty space reserved for
the class in the static memory section. But I consider this as not so
problematic.<br><br>Obviously, there are other possible weaknesses, like that pre-exit "Destroy" is not possible, but if one does not need this...<br><br>What do you think?<br><br>Tobias <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1143933" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1143933" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=1143933&amp;forumid=16477&amp;select=1143933#xx1143933xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=1143933#xx1143933xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(1320624,1143933);</script><span id="MVF1143933">Rate this message: <a href="#xx1143933xx" title="give this message a vote of 1" onclick="return RateMsg(1320624, 1143933, 1)"><b>1</b></a> <a href="#xx1143933xx" title="give this message a vote of 2" onclick="return RateMsg(1320624, 1143933, 2)"><b>2</b></a> <a href="#xx1143933xx" title="give this message a vote of 3" onclick="return RateMsg(1320624, 1143933, 3)"><b>3</b></a> <a href="#xx1143933xx" title="give this message a vote of 4" onclick="return RateMsg(1320624, 1143933, 4)"><b>4</b></a> <a href="#xx1143933xx" title="give this message a vote of 5" onclick="return RateMsg(1320624, 1143933, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx1143933xx" title="Mark as Spam" onclick="return ReportMsg(1320624, 1143933,-1)">Spam</a> or 
<a href="#xx1143933xx" title="Mark as Abuse" onclick="return ReportMsg(1320624, 1143933,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="6" width="1"></td></tr><tr id="1181642_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx1181642xx"></a><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="1181642" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=1181642#xx1181642xx">Re: What´s the currency in "not paying for what we don&#8217;t use"?</a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=175"><img src="singleton.asp_files/support_icon.gif" title="CodeProject supporter - Click for Profile" border="0" height="16" width="16"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle">peterchen&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle">8:33 2 Aug '05&nbsp;</font></td></tr>
<tr id="1181642_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">Meyers implementation adheres to NPFWYDU, the first (using a static member) does not.<br><br>Also,
static variables have other problems with intialization order (arising
from the C/C++ compile model) which are not present in Meyers version.<br><br>The only problem that remains with Meyer is multithreading.<br> <br><br><hr color="maroon"><small>Pandoras Gift #44: Hope. The one that keeps you on suffering.<br>aber.. "Wie gesagt, der Scheiss is' Therapie"<br><a href="http://www.codeproject.com/vcpp/stl/boostsmartptr.asp">boost your code</a> ||  <b><a href="http://www.codeproject.com/script/profile/whos_who.asp?msg=919055&amp;id=175#xx919055xx">Fold With Us!</a></b> || <a href="http://www.cherea.de/sighist.html" target="_blank">sighist</a> | <a href="http://www.codeproject.com/tips/doxysetup.asp">doxygen</a></small><br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1181642" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1181642" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=1143933&amp;forumid=16477&amp;select=1181642#xx1181642xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=1181642#xx1181642xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(175,1181642);</script><span id="MVF1181642">Rate this message: <a href="#xx1181642xx" title="give this message a vote of 1" onclick="return RateMsg(175, 1181642, 1)"><b>1</b></a> <a href="#xx1181642xx" title="give this message a vote of 2" onclick="return RateMsg(175, 1181642, 2)"><b>2</b></a> <a href="#xx1181642xx" title="give this message a vote of 3" onclick="return RateMsg(175, 1181642, 3)"><b>3</b></a> <a href="#xx1181642xx" title="give this message a vote of 4" onclick="return RateMsg(175, 1181642, 4)"><b>4</b></a> <a href="#xx1181642xx" title="give this message a vote of 5" onclick="return RateMsg(175, 1181642, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx1181642xx" title="Mark as Spam" onclick="return ReportMsg(175, 1181642,-1)">Spam</a> or 
<a href="#xx1181642xx" title="Mark as Abuse" onclick="return ReportMsg(175, 1181642,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="6" width="1"></td></tr><tr id="1181689_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx1181689xx"></a><img src="singleton.asp_files/ind.gif" height="1" width="36"><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="1181689" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=1181689#xx1181689xx">Correction: What´s the currency in "not paying for what we don&#8217;t use"?</a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=1320624"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle">tpolzin&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle">9:13 2 Aug '05&nbsp;</font></td></tr>
<tr id="1181689_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/ind.gif" height="1" width="36"><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">Well,
I misread the sentence in the article in a very silly way: Somehow I
was reading "However, Meyer does _not_ solve NPFWYDU", although there
was written that is _does_. I even quoted the sentence and did not
notice my mistake, this is depressing. Sorry.<br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1181689" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1181689" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=1143933&amp;forumid=16477&amp;select=1181689#xx1181689xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=1181689#xx1181689xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(1320624,1181689);</script><span id="MVF1181689">Rate this message: <a href="#xx1181689xx" title="give this message a vote of 1" onclick="return RateMsg(1320624, 1181689, 1)"><b>1</b></a> <a href="#xx1181689xx" title="give this message a vote of 2" onclick="return RateMsg(1320624, 1181689, 2)"><b>2</b></a> <a href="#xx1181689xx" title="give this message a vote of 3" onclick="return RateMsg(1320624, 1181689, 3)"><b>3</b></a> <a href="#xx1181689xx" title="give this message a vote of 4" onclick="return RateMsg(1320624, 1181689, 4)"><b>4</b></a> <a href="#xx1181689xx" title="give this message a vote of 5" onclick="return RateMsg(1320624, 1181689, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx1181689xx" title="Mark as Spam" onclick="return ReportMsg(1320624, 1181689,-1)">Spam</a> or 
<a href="#xx1181689xx" title="Mark as Abuse" onclick="return ReportMsg(1320624, 1181689,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="1119291_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx1119291xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="1119291" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=1119291#xx1119291xx"><b>Mutex</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=1800009"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>Jimmy Gilles</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>17:37 27 May '05</b>&nbsp;</font></td></tr>
<tr id="1119291_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">i think that there is a problem with LockThread.<br>Because, the method Instance() is static but the LockThread is not static.<br>If two threads call Instance() method, then it will create two LockThread object, so we don't a good mutex... no ?<br><br>My idea is to put a mutex as a variable like<br>static T* instance_;<br><br>then<br>static Mutex m_mutex;<br><br>and in the Instance() method, we put<br>m_mutex.lock()<br>...<br>m_mutex.unlock()<br><br>is it good ? :o) <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1119291" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1119291" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=1119291&amp;forumid=16477&amp;select=1119291#xx1119291xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=1119291#xx1119291xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(1800009,1119291);</script><span id="MVF1119291">Rate this message: <a href="#xx1119291xx" title="give this message a vote of 1" onclick="return RateMsg(1800009, 1119291, 1)"><b>1</b></a> <a href="#xx1119291xx" title="give this message a vote of 2" onclick="return RateMsg(1800009, 1119291, 2)"><b>2</b></a> <a href="#xx1119291xx" title="give this message a vote of 3" onclick="return RateMsg(1800009, 1119291, 3)"><b>3</b></a> <a href="#xx1119291xx" title="give this message a vote of 4" onclick="return RateMsg(1800009, 1119291, 4)"><b>4</b></a> <a href="#xx1119291xx" title="give this message a vote of 5" onclick="return RateMsg(1800009, 1119291, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx1119291xx" title="Mark as Spam" onclick="return ReportMsg(1800009, 1119291,-1)">Spam</a> or 
<a href="#xx1119291xx" title="Mark as Abuse" onclick="return ReportMsg(1800009, 1119291,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="1081116_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx1081116xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="1081116" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=1081116#xx1081116xx"><b>This singleton implementation is broken</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=1875299"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>Bourez</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>6:23 12 Apr '05</b>&nbsp;</font></td></tr>
<tr id="1081116_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">Why? only because the assignment of _instance is done in the "base class" c-tor singleton<t> of T (T must derive from Signleton<t>).
Another thread that calls Instance() may get a reference to an
non-fully constructed object T. Indeed, when calling Instance(), this
firstly checks _instance pointer (optimization with DCL pattern). And
this pointer may be not null, although the object T is not fully
constructed. Let's imagine a context switching just after the
assignment of _instance. The derived T class c-tor is not yet finished
and another thread may receive a reference to this instance. <br>&nbsp;</t></t></font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1081116" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1081116" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=1081116&amp;forumid=16477&amp;select=1081116#xx1081116xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=1081116#xx1081116xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(1875299,1081116);</script><span id="MVF1081116">Rate this message: <a href="#xx1081116xx" title="give this message a vote of 1" onclick="return RateMsg(1875299, 1081116, 1)"><b>1</b></a> <a href="#xx1081116xx" title="give this message a vote of 2" onclick="return RateMsg(1875299, 1081116, 2)"><b>2</b></a> <a href="#xx1081116xx" title="give this message a vote of 3" onclick="return RateMsg(1875299, 1081116, 3)"><b>3</b></a> <a href="#xx1081116xx" title="give this message a vote of 4" onclick="return RateMsg(1875299, 1081116, 4)"><b>4</b></a> <a href="#xx1081116xx" title="give this message a vote of 5" onclick="return RateMsg(1875299, 1081116, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx1081116xx" title="Mark as Spam" onclick="return ReportMsg(1875299, 1081116,-1)">Spam</a> or 
<a href="#xx1081116xx" title="Mark as Abuse" onclick="return ReportMsg(1875299, 1081116,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="879524_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx879524xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="879524" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=879524#xx879524xx"><b>Singleton should own itself?</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=1246825"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>Sumanth J</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>2:27 20 Jul '04</b>&nbsp;</font></td></tr>
<tr id="879524_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">hi,<br>consider the case of a DB connection singleton obj.<br>To create this u would need at a minimum, username,<br>passwd, hostname, etc..<br>I don't want the singleton object to assume these,<br>so am thinking client would need to pass this info..<br>maybe a conf_file..<br><br>so maybe a :<br>configureInstance(confFile) before<br>any call to getInstance( ), which could assert<br>that configureInstance has already been called..<br><br>flaws/suggestions/improvements.. <img src="singleton.asp_files/smiley_smile.gif" align="absmiddle"><br><br>tia..<br><br> <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=879524" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=879524" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=879524&amp;forumid=16477&amp;select=879524#xx879524xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=879524#xx879524xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(1246825,879524);</script><span id="MVF879524">Rate this message: <a href="#xx879524xx" title="give this message a vote of 1" onclick="return RateMsg(1246825, 879524, 1)"><b>1</b></a> <a href="#xx879524xx" title="give this message a vote of 2" onclick="return RateMsg(1246825, 879524, 2)"><b>2</b></a> <a href="#xx879524xx" title="give this message a vote of 3" onclick="return RateMsg(1246825, 879524, 3)"><b>3</b></a> <a href="#xx879524xx" title="give this message a vote of 4" onclick="return RateMsg(1246825, 879524, 4)"><b>4</b></a> <a href="#xx879524xx" title="give this message a vote of 5" onclick="return RateMsg(1246825, 879524, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx879524xx" title="Mark as Spam" onclick="return ReportMsg(1246825, 879524,-1)">Spam</a> or 
<a href="#xx879524xx" title="Mark as Abuse" onclick="return ReportMsg(1246825, 879524,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="787851_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx787851xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="787851" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=787851#xx787851xx"><b>It does not compile</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><img src="singleton.asp_files/usersuss.gif" alt="Unconfirmed/Anonymous posting" height="13" width="15">&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>A. Tam</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>8:43 9 Apr '04</b>&nbsp;</font></td></tr>
<tr id="787851_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">Before critisize the approach here I would like to get it to compile ...<br>Then I would like to see what are the tradeoffs performance vs. maintainence ...<br> <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=787851" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=787851" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=787851&amp;forumid=16477&amp;select=787851#xx787851xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=787851#xx787851xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right">[<a href="http://www.codeproject.com/script/comments/owner_modify_pw.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=787851">Modify</a> | <a href="http://www.codeproject.com/script/comments/owner_delete_pw.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=787851">Delete</a>]<br> <script language="Javascript">MsgVoteForm(0,787851);</script><span id="MVF787851">Rate this message: <a href="#xx787851xx" title="give this message a vote of 1" onclick="return RateMsg(0, 787851, 1)"><b>1</b></a> <a href="#xx787851xx" title="give this message a vote of 2" onclick="return RateMsg(0, 787851, 2)"><b>2</b></a> <a href="#xx787851xx" title="give this message a vote of 3" onclick="return RateMsg(0, 787851, 3)"><b>3</b></a> <a href="#xx787851xx" title="give this message a vote of 4" onclick="return RateMsg(0, 787851, 4)"><b>4</b></a> <a href="#xx787851xx" title="give this message a vote of 5" onclick="return RateMsg(0, 787851, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx787851xx" title="Mark as Spam" onclick="return ReportMsg(0, 787851,-1)">Spam</a> or 
<a href="#xx787851xx" title="Mark as Abuse" onclick="return ReportMsg(0, 787851,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="633942_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx633942xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="633942" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=633942#xx633942xx"><b>VC++ and Singleton</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=57661"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>Kimpan</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>9:20 9 Oct '03</b>&nbsp;</font></td></tr>
<tr id="633942_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">After reading the link:<br> http://www.cs.umd.edu/%7Epugh/java/memoryModel/DoubleCheckedLocking.html<br><br>I wonder if double-checked locking design pattern would work using 'volatile' in VC++ ?<br><br> <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=633942" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=633942" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=633942&amp;forumid=16477&amp;select=633942#xx633942xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=633942#xx633942xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(57661,633942);</script><span id="MVF633942">Rate this message: <a href="#xx633942xx" title="give this message a vote of 1" onclick="return RateMsg(57661, 633942, 1)"><b>1</b></a> <a href="#xx633942xx" title="give this message a vote of 2" onclick="return RateMsg(57661, 633942, 2)"><b>2</b></a> <a href="#xx633942xx" title="give this message a vote of 3" onclick="return RateMsg(57661, 633942, 3)"><b>3</b></a> <a href="#xx633942xx" title="give this message a vote of 4" onclick="return RateMsg(57661, 633942, 4)"><b>4</b></a> <a href="#xx633942xx" title="give this message a vote of 5" onclick="return RateMsg(57661, 633942, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx633942xx" title="Mark as Spam" onclick="return ReportMsg(57661, 633942,-1)">Spam</a> or 
<a href="#xx633942xx" title="Mark as Abuse" onclick="return ReportMsg(57661, 633942,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="604184_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx604184xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="604184" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=604184#xx604184xx"><b>Is this correct? revisited: Would this work?</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=309374"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>morga009</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>15:18 8 Sep '03</b>&nbsp;</font></td></tr>
<tr id="604184_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">In a previous response to the "Is this correct?" thread, Julian Brown wrote:<br><br>-----<br>This
Test -&gt; Lock -&gt; Test pattern cannot work unless the Create is
atomic. The Create can never be atomic ( new T() is no maore atomic
than calling a static Create method).<br><br>The only solution is to abandon this pattern and to Lock BEFORE the test.<br>-----<br><br>I
don't understand all the issues at play here, but assuming that the
Lock must come before the test on Singleton::instance_ in order to
ensure thread-safeness, would the following be an acceptable solution?<br><br>Assume an additional boolean member variable called m_bCreated initialized to false.<br><br>if (!m_bCreated &amp;&amp; m_bCreated = true)<br>{<br>  LockThread lock;<br>  if (Singleton::instance_ == 0)<br>  {<br>    Singleton::instance_ = CreateInstance();<br>    ... // etc.<br>  }<br>}<br>while (Singleton::instance_ == 0)<br>{<br>  // if a second thread tries to access the instance<br>  // while the instance is being created, wait until<br>  // creation of instance is complete<br>  Sleep(0); <br>}<br>return *(Singleton::instance_); <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=604184" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=604184" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=604184&amp;forumid=16477&amp;select=604184#xx604184xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=604184#xx604184xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(309374,604184);</script><span id="MVF604184">Rate this message: <a href="#xx604184xx" title="give this message a vote of 1" onclick="return RateMsg(309374, 604184, 1)"><b>1</b></a> <a href="#xx604184xx" title="give this message a vote of 2" onclick="return RateMsg(309374, 604184, 2)"><b>2</b></a> <a href="#xx604184xx" title="give this message a vote of 3" onclick="return RateMsg(309374, 604184, 3)"><b>3</b></a> <a href="#xx604184xx" title="give this message a vote of 4" onclick="return RateMsg(309374, 604184, 4)"><b>4</b></a> <a href="#xx604184xx" title="give this message a vote of 5" onclick="return RateMsg(309374, 604184, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx604184xx" title="Mark as Spam" onclick="return ReportMsg(309374, 604184,-1)">Spam</a> or 
<a href="#xx604184xx" title="Mark as Abuse" onclick="return ReportMsg(309374, 604184,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="585334_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx585334xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="585334" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=585334#xx585334xx"><b>I am still skeptical</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=382963"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>Julian Gold</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>4:49 19 Aug '03</b>&nbsp;</font></td></tr>
<tr id="585334_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">The
Singleton pattern still troubles me. First off, it has the flavour of a
"global variable", if not the full horrific impact. Nobody owns it, and
I am often led to wonder if my OO design is as good as it could be with
all these singletons kicking around.<br><br>That subclassing issue is
still tricky. There is NO nice way to subclass a singleton - the method
above required a hard-coded naming of the concrete type in the static
Instance() method. (I also notice that putting 'static' in an inline
function can have odd side-effects - each instantiation of the inline
(IF the compiler elects to inline it) in a translation unit will create
a "different" singelton. Different behaviour in debug and release is
one likely side-effect of this.) Since one of the goals of writing
classes is to allow users to subclass and override behaviour, this
implementation of singleton seems to throw away most of the power we'd
gain by using a class.<br><br>The templated way of <b>creating</b> a singleton from a general class also seems peculiar to me. The singleton object is <i>by definition</i>
the only instance of that class in a system. Philosophically it seems
wrong to suggest that any class can be a singleton just by wrapping it
in a template. And even with typedefs the syntax is ugly.<br><br>These days, I make do with a free function interface to a module:<br><br><pre><br>// PrintQueue.h<br>namespace PrintQueue<br>{<br><br>bool AddJob( /*whatever */ );<br>int GetEntryCount();<br><br>}<br></pre><br><br><pre><br>// PrintQueue.cpp<br>#include "PrintQueue.h"<br><br>struct Job<br>{<br>// Data.<br>};<br><br>namespace<br>{<br>std::queue<job> s_Entries;<br>}<br><br>bool PrintQueue::AddJob( /**/ )<br>{<br>    s_Entries.push_back( /**/ );<br>}<br><br>int PrintQueue::GetEntryCount()<br>{<br>    return( s_Entries.size() );<br>}<br></job></pre><br><br>Downsides:
no inlining; no subclassing. But then the former is rarely guaranteed
and the latter isn't really possible with the singleton pattern.<br><br>For
these reasons I think the singelton is actually The Emperor's New
Clothes of design patterns: gains little; throws away power;
syntactically ugly; looks like a global; fiddly and complex to
implement "properly". <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=585334" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=585334" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=585334&amp;forumid=16477&amp;select=585334#xx585334xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=585334#xx585334xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right">Score: 2.0 (1 vote).  <script language="Javascript">MsgVoteForm(382963,585334);</script><span id="MVF585334">Rate this message: <a href="#xx585334xx" title="give this message a vote of 1" onclick="return RateMsg(382963, 585334, 1)"><b>1</b></a> <a href="#xx585334xx" title="give this message a vote of 2" onclick="return RateMsg(382963, 585334, 2)"><b>2</b></a> <a href="#xx585334xx" title="give this message a vote of 3" onclick="return RateMsg(382963, 585334, 3)"><b>3</b></a> <a href="#xx585334xx" title="give this message a vote of 4" onclick="return RateMsg(382963, 585334, 4)"><b>4</b></a> <a href="#xx585334xx" title="give this message a vote of 5" onclick="return RateMsg(382963, 585334, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx585334xx" title="Mark as Spam" onclick="return ReportMsg(382963, 585334,-1)">Spam</a> or 
<a href="#xx585334xx" title="Mark as Abuse" onclick="return ReportMsg(382963, 585334,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="6" width="1"></td></tr><tr id="585485_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx585485xx"></a><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="585485" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=585485#xx585485xx">Re: I am still skeptical</a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=203178"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle">Lai Shiaw San Kent&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle">8:18 19 Aug '03&nbsp;</font></td></tr>
<tr id="585485_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">After
reading your feedback, I began to reread my GoF. What I have introduced
is perhaps, the barebone implementation of a Singleton, which acts just
like a global. In GoF, they described that a singleton can "control
access to sole instance". The how was easy, but the when part was not
mentioned. <br>Another thing they brought up is, permits a variable
number of instances, should you want to change your mind and have more
than a instance of the "singleton". That, too, triggers a couple of
thought off in my mind now.<br><br>I will go around adding and change a
couple more stuff on the article as well as the Singleton
implementation. And then of course, await for feedbacks again if the
new implemention is actually better, or worse.<br><br>Thanks for your feedback <img src="singleton.asp_files/smiley_smile.gif" align="absmiddle"> <br><br><a href="http://virtuallyonline.net/">VirtuallyOnline</a>.<a href="http://virtuallyonline.net/books">ReadMyRecommendedBooks</a>().<a href="http://virtuallyonline.net/gamedev/">ReadTheWeeklyGameDevChatStats</a>().<a href="http://virtuallyonline.net/forum">ReadTheCurrentlyEmptyForums</a>()<br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=585485" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=585485" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=585334&amp;forumid=16477&amp;select=585485#xx585485xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=585485#xx585485xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(203178,585485);</script><span id="MVF585485">Rate this message: <a href="#xx585485xx" title="give this message a vote of 1" onclick="return RateMsg(203178, 585485, 1)"><b>1</b></a> <a href="#xx585485xx" title="give this message a vote of 2" onclick="return RateMsg(203178, 585485, 2)"><b>2</b></a> <a href="#xx585485xx" title="give this message a vote of 3" onclick="return RateMsg(203178, 585485, 3)"><b>3</b></a> <a href="#xx585485xx" title="give this message a vote of 4" onclick="return RateMsg(203178, 585485, 4)"><b>4</b></a> <a href="#xx585485xx" title="give this message a vote of 5" onclick="return RateMsg(203178, 585485, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx585485xx" title="Mark as Spam" onclick="return ReportMsg(203178, 585485,-1)">Spam</a> or 
<a href="#xx585485xx" title="Mark as Abuse" onclick="return ReportMsg(203178, 585485,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="584964_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx584964xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="584964" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=584964#xx584964xx"><b>Great Article - Have a look at my Singleton stuff?</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=92685"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>Paul Evans</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>18:10 18 Aug '03</b>&nbsp;</font></td></tr>
<tr id="584964_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">Hi there,<br>  I've just flicked through your article and see it's very good.  I'm going to go through it tommorow properly.<br><br>
My article I posted a little while ago goes through a sort of hybrid
that you suggest, but as it's not Loxi actually does compile with the
MS Visual Studio 6. Infact when I first wrote it I did not know Loki
existed!<br><br>  Anyway if you have five minutes have a look and see what you think. <img src="singleton.asp_files/smiley_smile.gif" align="absmiddle"><br><br><a href="http://www.codeproject.com/useritems/pdesingletontemplatenomfc.asp">http://www.codeproject.com/useritems/pdesingletontemplatenomfc.asp</a>[<a target="_blank" title="New Window" href="http://www.codeproject.com/useritems/pdesingletontemplatenomfc.asp">^</a>]<br><br>Anyway, great stuff, got my 5.<br><br>Cheers,<br><br>Paul <br><br>/**********************************<br>Paul Evans, Dorset, UK.<br>Personal Homepage "EnjoySoftware" @ <br>http://www.enjoysoftware.co.uk/<br>**********************************/<br><br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=584964" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=584964" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=584964&amp;forumid=16477&amp;select=584964#xx584964xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=584964#xx584964xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(92685,584964);</script><span id="MVF584964">Rate this message: <a href="#xx584964xx" title="give this message a vote of 1" onclick="return RateMsg(92685, 584964, 1)"><b>1</b></a> <a href="#xx584964xx" title="give this message a vote of 2" onclick="return RateMsg(92685, 584964, 2)"><b>2</b></a> <a href="#xx584964xx" title="give this message a vote of 3" onclick="return RateMsg(92685, 584964, 3)"><b>3</b></a> <a href="#xx584964xx" title="give this message a vote of 4" onclick="return RateMsg(92685, 584964, 4)"><b>4</b></a> <a href="#xx584964xx" title="give this message a vote of 5" onclick="return RateMsg(92685, 584964, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx584964xx" title="Mark as Spam" onclick="return ReportMsg(92685, 584964,-1)">Spam</a> or 
<a href="#xx584964xx" title="Mark as Abuse" onclick="return ReportMsg(92685, 584964,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="6" width="1"></td></tr><tr id="585691_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx585691xx"></a><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="585691" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=585691#xx585691xx">Re: Great Article - Have a look at my Singleton stuff?</a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=203178"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle">Lai Shiaw San Kent&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle">11:25 19 Aug '03&nbsp;</font></td></tr>
<tr id="585691_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">I should be checking out your stuff tomorrow, prefer to print it out and read rather than on the computer. <img src="singleton.asp_files/smiley_wink.gif" align="absmiddle"> <br>Thanks! <br><br><a href="http://virtuallyonline.net/">VirtuallyOnline</a>.<a href="http://virtuallyonline.net/books">ReadMyRecommendedBooks</a>().<a href="http://virtuallyonline.net/gamedev/">ReadTheWeeklyGameDevChatStats</a>().<a href="http://virtuallyonline.net/forum">ReadTheCurrentlyEmptyForums</a>()<br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=585691" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=585691" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=584964&amp;forumid=16477&amp;select=585691#xx585691xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=585691#xx585691xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(203178,585691);</script><span id="MVF585691">Rate this message: <a href="#xx585691xx" title="give this message a vote of 1" onclick="return RateMsg(203178, 585691, 1)"><b>1</b></a> <a href="#xx585691xx" title="give this message a vote of 2" onclick="return RateMsg(203178, 585691, 2)"><b>2</b></a> <a href="#xx585691xx" title="give this message a vote of 3" onclick="return RateMsg(203178, 585691, 3)"><b>3</b></a> <a href="#xx585691xx" title="give this message a vote of 4" onclick="return RateMsg(203178, 585691, 4)"><b>4</b></a> <a href="#xx585691xx" title="give this message a vote of 5" onclick="return RateMsg(203178, 585691, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx585691xx" title="Mark as Spam" onclick="return ReportMsg(203178, 585691,-1)">Spam</a> or 
<a href="#xx585691xx" title="Mark as Abuse" onclick="return ReportMsg(203178, 585691,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="581617_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx581617xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="581617" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=581617#xx581617xx"><b>A simpler approach</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=7096"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>Jim A. Johnson</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>20:29 13 Aug '03</b>&nbsp;</font></td></tr>
<tr id="581617_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">I'm always amazed at the number of folks who try to make the Singleton more complicated than it needs to be.<br><br>The
business of autocreation and destruction is an unecessary wrinkle that
a lot of people seem hung up on. Except in the case of expensive
objects that are not always needed, this "requirement" is pointless.<br><br>Here's
how I do singletons: I include public Create() and Destroy() functions,
which are called at startup and shutdown, respectively. Simple, clean,
and unambiguous. <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=581617" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=581617" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=581617&amp;forumid=16477&amp;select=581617#xx581617xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=581617#xx581617xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(7096,581617);</script><span id="MVF581617">Rate this message: <a href="#xx581617xx" title="give this message a vote of 1" onclick="return RateMsg(7096, 581617, 1)"><b>1</b></a> <a href="#xx581617xx" title="give this message a vote of 2" onclick="return RateMsg(7096, 581617, 2)"><b>2</b></a> <a href="#xx581617xx" title="give this message a vote of 3" onclick="return RateMsg(7096, 581617, 3)"><b>3</b></a> <a href="#xx581617xx" title="give this message a vote of 4" onclick="return RateMsg(7096, 581617, 4)"><b>4</b></a> <a href="#xx581617xx" title="give this message a vote of 5" onclick="return RateMsg(7096, 581617, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx581617xx" title="Mark as Spam" onclick="return ReportMsg(7096, 581617,-1)">Spam</a> or 
<a href="#xx581617xx" title="Mark as Abuse" onclick="return ReportMsg(7096, 581617,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="6" width="1"></td></tr><tr id="581720_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx581720xx"></a><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="581720" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=581720#xx581720xx">Re: A simpler approach</a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=203178"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle">Lai Shiaw San Kent&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle">0:24 14 Aug '03&nbsp;</font></td></tr>
<tr id="581720_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent"><small><b>Jim A. Johnson wrote:</b></small><br><i>Here's
how I do singletons: I include public Create() and Destroy() functions,
which are called at startup and shutdown, respectively. Simple, clean,
and unambiguous</i><br><br>As pointed out in the updated article,
having a public Destroy and Create can result in codes that are not
multi-threaded safe. Of course, since you are the programmer, you would
know if such a design is suitable or otherwise. <br><br>Also, what you
described can be easily achieve by declaring the Singleton on the stack
at application startup, and simply call Singleton::Instance in any
case. <br><br><a href="http://virtuallyonline.net/">VirtuallyOnline</a>.<a href="http://virtuallyonline.net/books">ReadMyRecommendedBooks</a>().<a href="http://virtuallyonline.net/gamedev/">ReadTheWeeklyGameDevChatStats</a>().<a href="http://virtuallyonline.net/forum">ReadTheCurrentlyEmptyForums</a>()<br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=581720" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=581720" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=581617&amp;forumid=16477&amp;select=581720#xx581720xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=581720#xx581720xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(203178,581720);</script><span id="MVF581720">Rate this message: <a href="#xx581720xx" title="give this message a vote of 1" onclick="return RateMsg(203178, 581720, 1)"><b>1</b></a> <a href="#xx581720xx" title="give this message a vote of 2" onclick="return RateMsg(203178, 581720, 2)"><b>2</b></a> <a href="#xx581720xx" title="give this message a vote of 3" onclick="return RateMsg(203178, 581720, 3)"><b>3</b></a> <a href="#xx581720xx" title="give this message a vote of 4" onclick="return RateMsg(203178, 581720, 4)"><b>4</b></a> <a href="#xx581720xx" title="give this message a vote of 5" onclick="return RateMsg(203178, 581720, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx581720xx" title="Mark as Spam" onclick="return ReportMsg(203178, 581720,-1)">Spam</a> or 
<a href="#xx581720xx" title="Mark as Abuse" onclick="return ReportMsg(203178, 581720,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="6" width="1"></td></tr><tr id="585145_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx585145xx"></a><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="585145" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=585145#xx585145xx">Re: A simpler approach</a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><img src="singleton.asp_files/usersuss.gif" alt="Unconfirmed/Anonymous posting" height="13" width="15">&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle">Anonymous&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle">23:35 18 Aug '03&nbsp;</font></td></tr>
<tr id="585145_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">You're
right, that is simpler. Forget all design patterns, forget
constructors, destructors, heck, let's forget about C++ and OO, but
those are just unnecessary wrinkles. Let's all go back to doing C... In
fact, let's forget C, let's do VB, that's much simpler; dragging icons
around and pretend you're a real developer...<br><br><img src="singleton.asp_files/smiley_mad.gif" align="absmiddle"><br><br> <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=585145" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=581617&amp;forumid=16477&amp;select=585145#xx585145xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=585145#xx585145xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right">[<a href="http://www.codeproject.com/script/comments/owner_modify_pw.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=585145">Modify</a> | <a href="http://www.codeproject.com/script/comments/owner_delete_pw.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=585145">Delete</a>]<br>Score: 1.0 (1 vote).  <script language="Javascript">MsgVoteForm(0,585145);</script><span id="MVF585145">Rate this message: <a href="#xx585145xx" title="give this message a vote of 1" onclick="return RateMsg(0, 585145, 1)"><b>1</b></a> <a href="#xx585145xx" title="give this message a vote of 2" onclick="return RateMsg(0, 585145, 2)"><b>2</b></a> <a href="#xx585145xx" title="give this message a vote of 3" onclick="return RateMsg(0, 585145, 3)"><b>3</b></a> <a href="#xx585145xx" title="give this message a vote of 4" onclick="return RateMsg(0, 585145, 4)"><b>4</b></a> <a href="#xx585145xx" title="give this message a vote of 5" onclick="return RateMsg(0, 585145, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx585145xx" title="Mark as Spam" onclick="return ReportMsg(0, 585145,-1)">Spam</a> or 
<a href="#xx585145xx" title="Mark as Abuse" onclick="return ReportMsg(0, 585145,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="6" width="1"></td></tr><tr id="585169_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx585169xx"></a><img src="singleton.asp_files/ind.gif" height="1" width="36"><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="585169" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=585169#xx585169xx">Re: A simpler approach</a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=7096"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle">Jim A. Johnson&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle">0:17 19 Aug '03&nbsp;</font></td></tr>
<tr id="585169_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/ind.gif" height="1" width="36"><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">Wow - who pissed in your cornflakes?<br><br>Nothing
I've suggested violates OO, or even the design pattern. If you actually
_read_ the description of the singleton in GOF, you'll recognize that
the "create on demand" aspect of the singleton pattern is not an
essential aspect; it's just a convention. Granted, it has its uses, but
it's not necessary in the majority of singleton applications. <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=585169" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=585169" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=581617&amp;forumid=16477&amp;select=585169#xx585169xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=585169#xx585169xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(7096,585169);</script><span id="MVF585169">Rate this message: <a href="#xx585169xx" title="give this message a vote of 1" onclick="return RateMsg(7096, 585169, 1)"><b>1</b></a> <a href="#xx585169xx" title="give this message a vote of 2" onclick="return RateMsg(7096, 585169, 2)"><b>2</b></a> <a href="#xx585169xx" title="give this message a vote of 3" onclick="return RateMsg(7096, 585169, 3)"><b>3</b></a> <a href="#xx585169xx" title="give this message a vote of 4" onclick="return RateMsg(7096, 585169, 4)"><b>4</b></a> <a href="#xx585169xx" title="give this message a vote of 5" onclick="return RateMsg(7096, 585169, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx585169xx" title="Mark as Spam" onclick="return ReportMsg(7096, 585169,-1)">Spam</a> or 
<a href="#xx585169xx" title="Mark as Abuse" onclick="return ReportMsg(7096, 585169,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="6" width="1"></td></tr><tr id="592124_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx592124xx"></a><img src="singleton.asp_files/ind.gif" height="1" width="54"><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="592124" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=592124#xx592124xx">Re: A simpler approach</a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=19872"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle">Robin&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle">1:10 26 Aug '03&nbsp;</font></td></tr>
<tr id="592124_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/ind.gif" height="1" width="54"><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">Your
simple approach will work in your application only. The singleton
pattern is used for something more general, say like cout. Have you
thought on how cout is implemented using your simple method? <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=592124" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=592124" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=581617&amp;forumid=16477&amp;select=592124#xx592124xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=592124#xx592124xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(19872,592124);</script><span id="MVF592124">Rate this message: <a href="#xx592124xx" title="give this message a vote of 1" onclick="return RateMsg(19872, 592124, 1)"><b>1</b></a> <a href="#xx592124xx" title="give this message a vote of 2" onclick="return RateMsg(19872, 592124, 2)"><b>2</b></a> <a href="#xx592124xx" title="give this message a vote of 3" onclick="return RateMsg(19872, 592124, 3)"><b>3</b></a> <a href="#xx592124xx" title="give this message a vote of 4" onclick="return RateMsg(19872, 592124, 4)"><b>4</b></a> <a href="#xx592124xx" title="give this message a vote of 5" onclick="return RateMsg(19872, 592124, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx592124xx" title="Mark as Spam" onclick="return ReportMsg(19872, 592124,-1)">Spam</a> or 
<a href="#xx592124xx" title="Mark as Abuse" onclick="return ReportMsg(19872, 592124,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="6" width="1"></td></tr><tr id="1179209_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx1179209xx"></a><img src="singleton.asp_files/ind.gif" height="1" width="72"><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="1179209" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=1179209#xx1179209xx">Re: A simpler approach</a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=10710"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle">Tim Smith&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle">8:52 30 Jul '05&nbsp;</font></td></tr>
<tr id="1179209_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/ind.gif" height="1" width="72"><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">His
approach is a very common approach that works very well. Is it
universal? No. However, in the quest for making a single widget that
works everywhere, we have lost sight of the real issue, creating
software that works. Nobody can ever say that on the fly singletons are
the best thing for all applications. I have removed singleton systems
and replaced them with global instances and create/destroy systems
because it was more appropriate for the application at hand.<br><br>BTW, cout is a global instance so it doesn't even use on the fly singletons.  And it works just fine.  OMG!!! <br><br>Tim Smith<br><br>I'm going to patent thought.  I have yet to see any prior art.<br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1179209" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=1179209" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=581617&amp;forumid=16477&amp;select=1179209#xx1179209xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=1179209#xx1179209xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(10710,1179209);</script><span id="MVF1179209">Rate this message: <a href="#xx1179209xx" title="give this message a vote of 1" onclick="return RateMsg(10710, 1179209, 1)"><b>1</b></a> <a href="#xx1179209xx" title="give this message a vote of 2" onclick="return RateMsg(10710, 1179209, 2)"><b>2</b></a> <a href="#xx1179209xx" title="give this message a vote of 3" onclick="return RateMsg(10710, 1179209, 3)"><b>3</b></a> <a href="#xx1179209xx" title="give this message a vote of 4" onclick="return RateMsg(10710, 1179209, 4)"><b>4</b></a> <a href="#xx1179209xx" title="give this message a vote of 5" onclick="return RateMsg(10710, 1179209, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx1179209xx" title="Mark as Spam" onclick="return ReportMsg(10710, 1179209,-1)">Spam</a> or 
<a href="#xx1179209xx" title="Mark as Abuse" onclick="return ReportMsg(10710, 1179209,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="580623_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx580623xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="580623" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=580623#xx580623xx"><b>Thanks for the feedback, keep them coming in</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=203178"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>Lai Shiaw San Kent</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>23:01 12 Aug '03</b>&nbsp;</font></td></tr>
<tr id="580623_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">It's
good to always hear feedbacks and discuss what is failing. I will
proceed to add these feedbacks into the article itself later at night
(once I knock off from work). Thanks<br><br>Cheers <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=580623" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=580623" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=580623&amp;forumid=16477&amp;select=580623#xx580623xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=580623#xx580623xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(203178,580623);</script><span id="MVF580623">Rate this message: <a href="#xx580623xx" title="give this message a vote of 1" onclick="return RateMsg(203178, 580623, 1)"><b>1</b></a> <a href="#xx580623xx" title="give this message a vote of 2" onclick="return RateMsg(203178, 580623, 2)"><b>2</b></a> <a href="#xx580623xx" title="give this message a vote of 3" onclick="return RateMsg(203178, 580623, 3)"><b>3</b></a> <a href="#xx580623xx" title="give this message a vote of 4" onclick="return RateMsg(203178, 580623, 4)"><b>4</b></a> <a href="#xx580623xx" title="give this message a vote of 5" onclick="return RateMsg(203178, 580623, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx580623xx" title="Mark as Spam" onclick="return ReportMsg(203178, 580623,-1)">Spam</a> or 
<a href="#xx580623xx" title="Mark as Abuse" onclick="return ReportMsg(203178, 580623,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="580345_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx580345xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="580345" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=580345#xx580345xx"><b>I have some issues.</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=4650"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>WREY</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>14:25 12 Aug '03</b>&nbsp;</font></td></tr>
<tr id="580345_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">One of the things a true Singleton possesses, is the ability to <u>destroy itself</u>. This is <b>CRITICAL</b>
in a multithreaded environment. Alexandrescu and other authors speak of
it for good reasons, but nowhere in your excellent article do I see
where the <u>automatic</u> destruction of the Singleton is shown.<br><br>The whole idea behind the use of the Singleton is to regulate and control <b>"flow"</b> (like a traffic signal regulating a service) from <u>a single source</u>.
When that task has been fulfilled and is no longer required, that's
when the Singleton should destroy itself. It knows to do this primarily
through reference counting and should never be a concern of the
programmer to have to keep tabs on "when" and "where" it ought to be
destroyed. (If the programmer is to be saddled with that
responsibility, then there is no need for a Singleton in the first
place.)<br><br>This is one of a few issues I have with your (otherwise
very good) presentation of the Singleton. Another is with
"extensibility," but before I get into those other matters, I am
getting a compile error from "typetraits.hpp" (about 10 or so lines
from the bottom of the that file) stating that "'std' is not a class or
namespace name". It didn't help either when I added, "using namespace
std;" at the top (before "namespace Dot").<br><br>Lastly, because I am
using VC++ 6.0, I had to create my own project file (etc.), which means
I do not see your article as being truly for VC++ 7 only. Other
versions of VC++ can use it.<br><br><img src="singleton.asp_files/smiley_wink.gif" align="absmiddle"> <br><br>William<br><br>Fortes in fide et opere!<br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=580345" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=580345" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=580345&amp;forumid=16477&amp;select=580345#xx580345xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=580345#xx580345xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(4650,580345);</script><span id="MVF580345">Rate this message: <a href="#xx580345xx" title="give this message a vote of 1" onclick="return RateMsg(4650, 580345, 1)"><b>1</b></a> <a href="#xx580345xx" title="give this message a vote of 2" onclick="return RateMsg(4650, 580345, 2)"><b>2</b></a> <a href="#xx580345xx" title="give this message a vote of 3" onclick="return RateMsg(4650, 580345, 3)"><b>3</b></a> <a href="#xx580345xx" title="give this message a vote of 4" onclick="return RateMsg(4650, 580345, 4)"><b>4</b></a> <a href="#xx580345xx" title="give this message a vote of 5" onclick="return RateMsg(4650, 580345, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx580345xx" title="Mark as Spam" onclick="return ReportMsg(4650, 580345,-1)">Spam</a> or 
<a href="#xx580345xx" title="Mark as Abuse" onclick="return ReportMsg(4650, 580345,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="6" width="1"></td></tr><tr id="580607_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx580607xx"></a><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="580607" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=580607#xx580607xx">Re: I have some issues.</a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=203178"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle">Lai Shiaw San Kent&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle">21:56 12 Aug '03&nbsp;</font></td></tr>
<tr id="580607_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent"><small><b>WREY wrote:</b></small><br><i>Alexandrescu
and other authors speak of it for good reasons, but nowhere in your
excellent article do I see where the automatic destruction of the
Singleton is shown.</i><br>Automatic destruction of the Singleton
object was first introduced by a declaration of a static instance of
the Singleton object in Meyer's Singleton Implementation, followed by
std::auto_ptr in the codes, which was later replaced by std::atexit.
However, it is truely an oversight on my side that I failed to mention
how such a seemingly trival issue is implemented.<br><br><small><b>WREY wrote:</b></small><br><i>reference
counting and should never be a concern of the programmer to have to
keep tabs on "when" and "where" it ought to be destroyed.</i><br>The
final proposed implementation allows the Singleton to destroy itself(as
mentioned above), yet provide the option for the programmer to do so
"should he decide to". A self-aware Singleton can help the programmer,
but should relinquesh control to the programmer should he decide to
take over. Reference counting is not a viable option as well, unless
you imposed another style of usage.<br><br>Let's imagine Instance now
returns a Reference Counted container of the held object. Upon
creation, should reference be 1, or 0? If it's X, then logically X - 1
is the counter at which destruction occurs. And when Instance returns
the reference counted container of the held object, should reference
count be increased? If it is, then a logical implementation of the
container should decrease the count as well when the container goes out
of scope. Then, however, the reference counted object can never hit 0,
unless via a function call Release on the Singleton itself, which does
not fulfill your requirement. If however, we choose to not increment
the counter when returning the object, we should choose to not
decrement the counter as well. Should we choose to, then the object
would reached counter 0, and destroyed. Thus every Instance call of
Singleton would require a creation, return container. container out of
scope, destruction.<br><br>I would, however, like to hear about a more suitable reference counting mechanisim, should you have one. <img src="singleton.asp_files/smiley_smile.gif" align="absmiddle"><br><br><small><b>WREY wrote:</b></small><br><i>I
am getting a compile error from "typetraits.hpp" (about 10 or so lines
from the bottom of the that file) stating that "'std' is not a class or
namespace name". It didn't help either when I added, "using namespace
std;" at the top (before "namespace Dot").</i><br><br>That would be a
mistake of mine. Typetraits.hpp(along with Singleton.hpp) are part of
my own personal framework, and involves codes that uses partial
template specialization(Currently supported by VS.Net 2k3 only, in
regards to Microsoft compilers.) that was not related to the article.
Typetraits.hpp can be reduced to simply the defination of
Dot::TypeTraits. Thanks for pointing that out <br><br>(Just updated the zip files and removed unnecessary dependencies)<br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=580607" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=580607" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=580345&amp;forumid=16477&amp;select=580607#xx580607xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=580607#xx580607xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(203178,580607);</script><span id="MVF580607">Rate this message: <a href="#xx580607xx" title="give this message a vote of 1" onclick="return RateMsg(203178, 580607, 1)"><b>1</b></a> <a href="#xx580607xx" title="give this message a vote of 2" onclick="return RateMsg(203178, 580607, 2)"><b>2</b></a> <a href="#xx580607xx" title="give this message a vote of 3" onclick="return RateMsg(203178, 580607, 3)"><b>3</b></a> <a href="#xx580607xx" title="give this message a vote of 4" onclick="return RateMsg(203178, 580607, 4)"><b>4</b></a> <a href="#xx580607xx" title="give this message a vote of 5" onclick="return RateMsg(203178, 580607, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx580607xx" title="Mark as Spam" onclick="return ReportMsg(203178, 580607,-1)">Spam</a> or 
<a href="#xx580607xx" title="Mark as Abuse" onclick="return ReportMsg(203178, 580607,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="singleton.asp_files/t.gif" height="1" width="1"></td></tr><tr id="580225_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx580225xx"></a><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="580225" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=580225#xx580225xx"><b>Is this correct?</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=239649"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>e_invalidarg</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>12:32 12 Aug '03</b>&nbsp;</font></td></tr>
<tr id="580225_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">I think your code assumes that <br><br>Singleton::instance_ = CreateInstance();<br><br>is an atomic operation.<br><br>I don't believe that this is a valid assumption.<br> <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=580225" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=580225" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=580225&amp;forumid=16477&amp;select=580225#xx580225xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=580225#xx580225xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(239649,580225);</script><span id="MVF580225">Rate this message: <a href="#xx580225xx" title="give this message a vote of 1" onclick="return RateMsg(239649, 580225, 1)"><b>1</b></a> <a href="#xx580225xx" title="give this message a vote of 2" onclick="return RateMsg(239649, 580225, 2)"><b>2</b></a> <a href="#xx580225xx" title="give this message a vote of 3" onclick="return RateMsg(239649, 580225, 3)"><b>3</b></a> <a href="#xx580225xx" title="give this message a vote of 4" onclick="return RateMsg(239649, 580225, 4)"><b>4</b></a> <a href="#xx580225xx" title="give this message a vote of 5" onclick="return RateMsg(239649, 580225, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx580225xx" title="Mark as Spam" onclick="return ReportMsg(239649, 580225,-1)">Spam</a> or 
<a href="#xx580225xx" title="Mark as Abuse" onclick="return ReportMsg(239649, 580225,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="6" width="1"></td></tr><tr id="580547_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx580547xx"></a><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="580547" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;select=580547#xx580547xx">Re: Is this correct?</a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=25703"><img src="singleton.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle">Julian Brown&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle">19:35 12 Aug '03&nbsp;</font></td></tr>
<tr id="580547_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="singleton.asp_files/ind.gif" height="1" width="18"><img src="singleton.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">Seconded.<br><br>This
example repeats the mistaken belief that "Test -&gt; Lock -&gt; Test"
is safe. It cannot be unless CreateInstance is atomic (which is not
possible).<br> <br><br>Julian<br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=580547" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/singleton.asp&amp;df=100&amp;forumid=16477&amp;select=580547" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;tid=580225&amp;forumid=16477&amp;select=580547#xx580547xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/singleton.asp?msg=580547#xx580547xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(25703,580547);</script><span id="MVF580547">Rate this message: <a href="#xx580547xx" title="give this message a vote of 1" onclick="return RateMsg(25703, 580547, 1)"><b>1</b></a> <a href="#xx580547xx" title="give this message a vote of 2" onclick="return RateMsg(25703, 580547, 2)"><b>2</b></a> <a href="#xx580547xx" title="give this message a vote of 3" onclick="return RateMsg(25703, 580547, 3)"><b>3</b></a> <a href="#xx580547xx" title="give this message a vote of 4" onclick="return RateMsg(25703, 580547, 4)"><b>4</b></a> <a href="#xx580547xx" title="give this message a vote of 5" onclick="return RateMsg(25703, 580547, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx580547xx" title="Mark as Spam" onclick="return ReportMsg(25703, 580547,-1)">Spam</a> or 
<a href="#xx580547xx" title="Mark as Abuse" onclick="return ReportMsg(25703, 580547,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="singleton.asp_files/t.gif" border="0" height="5" width="1"></td></tr></tbody></table></td></tr><tr bgcolor="#fbedbb"><td><table cellpadding="2" width="100%"><tbody><tr><td class="messagetitle">Last Visit: 6:34 Monday 27th November, 2006</td><td align="right" nowrap="nowrap"><font class="messagetitle"><span class="HoverLink">First</span> <span class="HoverLink">Prev</span> <a class="HoverLink" name="HoverNL" href="http://www.codeproject.com/cpp/singleton.asp?df=100&amp;forumid=16477&amp;fr=26">Next</a> <span class="HoverLink">&nbsp;&nbsp;&nbsp;&nbsp;</span> </font></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>
</div><p class="smallText"><img src="singleton.asp_files/news_general.gif" align="absmiddle"> General comment &nbsp;&nbsp; <img src="singleton.asp_files/news_info.gif" align="absmiddle"> News / Info &nbsp;&nbsp; <img src="singleton.asp_files/news_question.gif" align="absmiddle"> Question &nbsp;&nbsp; <img src="singleton.asp_files/news_answer.gif" align="absmiddle"> Answer &nbsp;&nbsp; <img src="singleton.asp_files/news_game.gif" align="absmiddle"> Joke / Game &nbsp;&nbsp; <img src="singleton.asp_files/news_sticky.gif" align="absmiddle"> Admin message</p>
<br>


<table cellspacing="5" width="100%">
<tbody><tr valign="top"><td class="smallText">

Updated: 21 Aug 2003
</td><td class="SmallText" align="right">
Article content copyright Lai Shiaw San Kent, 2003<br>
everything else Copyright © <a href="mailto:webmaster@codeproject.com">CodeProject</a>, 1999-2006.

<br>
Web05 |
<a href="http://www.codeproject.com/info/MediaKit">Advertise on The Code Project</a> | <a href="http://www.codeproject.com/info/privacy.asp">Privacy</a>

</td></tr>
</tbody></table>

</td></tr></tbody></table>


<script type="text/javascript" src="singleton.asp_files/front.js"></script><script language="javascript" src="singleton.asp_files/door.js"></script>
<br>
<center>
<table border="0" cellpadding="0" cellspacing="0" width="95%">
<tbody><tr><td bgcolor="#ff9900" height="1"><img src="singleton.asp_files/space.gif" height="1"></td></tr>
<tr>
<td align="center"><font size="1">

<a href="http://www.theultimatetoolbox.com/">The Ultimate Toolbox</a> &#8226;
<a href="http://www.aspalliance.com/">ASP Alliance</a> &#8226;
<a href="http://www.developerfusion.co.uk/">Developer Fusion</a> &#8226;
<a href="http://www.developersdex.com/">Developersdex</a> &#8226;
<a href="http://www.devguru.com/">DevGuru</a> &#8226;
<a href="http://www.programmersheaven.com/">Programmers Heaven</a> &#8226;
<a href="http://www.planet-source-code.com/">Planet Source Code</a> &#8226;
<a href="http://www.tek-tips.com/">Tek-Tips Forums</a> &#8226;

</font>	
</td>
</tr>
</tbody></table>
</center>
</td></tr></tbody></table><div style="position: absolute; visibility: visible; background-color: rgb(72, 142, 0); z-index: 101; width: 381px; height: 22px; top: 115px; left: 874px;"><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 40px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 2px;">Help!</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 55px; height: 16px; padding-left: 5px; padding-top: 2px; left: 50px; top: 2px;">Articles</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 115px; height: 16px; padding-left: 5px; padding-top: 2px; left: 113px; top: 2px;">Message Boards</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 75px; height: 16px; padding-left: 5px; padding-top: 2px; left: 236px; top: 2px;">StoreFront</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 55px; height: 16px; padding-left: 5px; padding-top: 2px; left: 319px; top: 2px;">Lounge</div></div><div style="position: absolute; visibility: hidden; background-color: rgb(72, 142, 0); z-index: 102; width: 194px; height: 98px; top: 0pt; left: 0pt;"><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 185px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 2px;">What is 'The Code Project'?</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 185px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 21px;">General FAQ</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 185px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 40px;">Post a Question</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 185px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 59px;">Site Directory</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 185px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 78px;">About Us</div></div><div style="position: absolute; visibility: hidden; background-color: rgb(72, 142, 0); z-index: 102; width: 154px; height: 136px; top: 0pt; left: 0pt;"><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 2px;">Latest</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 21px;">Most Popular</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 40px;">Search</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 59px;">Site Directory</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 78px;">Submit an Article</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 97px;">Update an Article</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 116px;">Article Competition</div></div><div style="position: absolute; visibility: hidden; background-color: rgb(72, 142, 0); z-index: 102; width: 154px; height: 383px; top: 0pt; left: 0pt;"><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 2px;">Visual C++</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 21px;">ATL / WTL / STL</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 40px;">COM</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 59px;">C++/CLI</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 78px;">C#</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 97px;">ASP.NET</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 116px;">VB.NET</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 135px;">Web Development</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 154px;">.NET Framework</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 173px;">SQL / ADO / ADO.NET</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 192px;">XML / XSL</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 211px;">OS / SysAdmin</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 230px;">Work Issues</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 249px;">Article Requests</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 268px;">Collaboration</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 287px;">General Discussions</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 306px;">Hardware</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 325px;">Algorithms / Math</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 344px;">Suggestions</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 363px;">The Soapbox</div></div><script type="text/javascript" src="singleton.asp_files/func_033.js"></script><script type="text/javascript" src="singleton.asp_files/al.htm"></script></body></html>