<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><title>C++ Standard Allocator, An Introduction and Implementation - The Code Project - C++ / MFC</title>




<!-- base -->
<meta http-equiv="Reply-to" content="mailto:webmaster@codeproject.com">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="MS.LOCALE" content="en-US">
<meta name="Description" content="Introduction to the allocator concept, as well as implementing a policy-driven allocator template class">
<meta name="Search.TopicType" content="kbArticle">
<meta name="Author" content="Lai Shiaw San Kent">
<meta name="Search.PublishDate" content="18 Aug 2003 14:00:00 GMT">
<meta name="Search.RevisedDate" content="18 Aug 2003 14:00:00 GMT">

<meta name="keywords" content="Free source code, , Visual C++, MFC, Windows, allocator C++ Templates Policy Loki">
<meta name="Copyright" content="Article content copyright Lai Shiaw San Kent, 2003, everthing else Copyright © CodeProject, 1999-2006, All Rights Reserved.">
<link rel="alternate" type="application/rss+xml" title="CodeProject Lounge Postings" href="http://www.codeproject.com/webservices/LoungeRSS.aspx">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - All topics" href="http://www.codeproject.com/webservices/articlerss.aspx?cat=1">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - MFC / C++" href="http://www.codeproject.com/webservices/articlerss.aspx?cat=2">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - C#" href="http://www.codeproject.com/webservices/articlerss.aspx?cat=3">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - ASP.NET" href="http://www.codeproject.com/webservices/articlerss.aspx?cat=4">
<link rel="alternate" type="application/rss+xml" title="CodeProject Latest articles - .NET" href="http://www.codeproject.com/webservices/articlerss.aspx?cat=5">
<link rel="icon" href="http://www.codeproject.com/favicon.ico" type="image/ico">
<link rel="SHORTCUT ICON" href="http://www.codeproject.com/favicon.ico">
<link rel="stylesheet" type="text/css" href="allocator.asp_files/global.css">

<link rel="stylesheet" type="text/css" href="allocator.asp_files/netscape6.css">

<script language="javascript" src="allocator.asp_files/oncopy.js"></script>
<script language="javascript">
if (top != self) top.location.href = location.href;
if (typeof(DemoUrl) != "undefined")
	document.write('<me' + 'ta http' + '-equiv="re' + 'fresh" con' + 'tent="1;url=' + DemoUrl + '">');
</script></head><body style="margin: 0pt; background-color: rgb(255, 255, 255);" oncopy="return copyCode();" alink="red" bgcolor="white" link="blue" text="black" vlink="navy">

<!-- COPYRIGHT 2006 I/PRO Corporation ALL RIGHTS RESERVED. - Page view auditing -->
<script type="text/javascript" language="JavaScript">
var LSPT="";
LSPT += "?durl=" + escape(document.URL);
LSPT += "&hostname=" + location.hostname;
LSPT += "&url=" + location.pathname;
LSPT += "&query=" + escape(location.search) + escape(location.hash);
LSPT += "&referrer=" + escape(document.referrer);
LSPT += "&browser=" + escape(navigator.appName);
LSPT += "&version=" + escape(navigator.appVersion);
LSPT += "&os=" + escape(navigator.platform);
LSPT += "&xdomain=codeproject.com";
LSPT += "&custid=codeproject";
</script>
<script type="text/javascript">
document.write('<img src=http://'+'content.ipro.com/images/pixel.gif'+LSPT+' height="1" width="1" style="position:absolute; top:0px; left:0px">');
</script><img src="allocator.asp_files/pixel.gif" style="position: absolute; top: 0px; left: 0px;" height="1" width="1">
<noscript>
<img src="http://content.ipro.com/images/pixel?version=nonjava" height="1" width="1" style="position:absolute;top:0px;left:0px">
</noscript>
<!-- END I/PRO PAGE TAG -->


<table border="0" cellpadding="0" cellspacing="0" width="100%">

<tbody><tr>
	<td class="HeaderLogo"><a href="http://www.codeproject.com/"><img alt="Home" src="allocator.asp_files/codeproject225x90.gif" border="0" height="90"></a></td>
	<td class="HeaderBanner"><span id="AdBanner4"><script language="javascript">document.write("<a href=\"/script/admentor/admentorredir.asp?id=2250&way=ban\" target=_blank><img src=\"/script/ann/ServeImg.aspx?File=%2Fscript%2Fadmentor%2Fimages%2FGrid%5F728x90%2Egif&C=False&id=2250&cb=2047358\" alt=\"\" border=0 width=728 height=90></a>");</script><a href="http://www.codeproject.com/script/admentor/admentorredir.asp?id=2250&amp;way=ban" target="_blank"><img src="allocator.asp_files/ServeImg_002.htm" alt="" border="0" height="90" width="728"></a></span></td>
</tr>
<tr><td colspan="2">
<table class="MemberNavBar" border="0" cellpadding="5" cellspacing="0" width="100%">
<tbody><tr valign="middle">

<td class="smallText" style="font-weight: bold;">3,579,412 members and growing! &nbsp;
11,851 now online.
</td>


<td class="userNavText" align="right">



<a href="http://www.codeproject.com/script/profile/whos_who.asp?id=3585371">
My Profile
</a> |
<a href="http://www.codeproject.com/script/profile/modify.asp?ct=/cpp/allocator.asp"><b>My Settings</b></a> |
<a href="http://www.codeproject.com/script/profile/bookmark_list.asp">My Bookmarks</a> |
<a href="http://www.codeproject.com/script/articles/list_articles.asp?userid=3585371">My Articles</a> |

<a href="http://www.codeproject.com/script/profile/logoff.asp?ct=/cpp/allocator.asp">Sign out</a>


</td>
</tr>
</tbody></table></td></tr>
<tr><td colspan="2">
<table class="SiteNavBar" id="tblSiteToolbar" cellpadding="0" cellspacing="0">
<tbody><tr>
<td><a href="http://www.codeproject.com/">Home</a></td>
<td nowrap="nowrap"><a href="http://www.codeproject.com/index.asp?cat=2">MFC/C++</a></td>
<td><a href="http://www.codeproject.com/index.asp?cat=3">C#</a></td>
<td nowrap="nowrap"><a href="http://www.codeproject.com/index.asp?cat=4">ASP.NET</a></td>
<td><a href="http://www.codeproject.com/index.asp?cat=5">.NET</a></td>
<td nowrap="nowrap"><a href="http://www.codeproject.com/index.asp?cat=6">VB.NET</a></td>
<td class="SelCat" nowrap="nowrap"><a href="http://www.codeproject.com/index.asp?cat=1">All Topics</a></td>
<td width="100%">&nbsp;</td>
<td>
	<div id="MenuPos" style="position: relative; width: 380px; height: 22px; top: 1px;">
	<table id="MPH" style="border-width: 0pt; height: 20px; display: none;" cellpadding="0" cellspacing="0" width="380">
	<tbody><tr valign="middle">
		<td style="border-width: 0pt;" nowrap="nowrap"><a href="http://www.codeproject.com/info/faq.asp">Help!</a></td>
		<td style="border-width: 0pt;" nowrap="nowrap"><a href="http://www.codeproject.com/info/latest.asp">Articles</a></td>
		<td style="border-width: 0pt;" nowrap="nowrap"><a href="http://www.codeproject.com/script/comments/forums.asp">Message Boards</a></td>
		<td style="border-width: 0pt;" nowrap="nowrap"><a href="http://www.codeproject.com/store/">StoreFront</a></td>
		<td style="border-width: 0pt;" nowrap="nowrap"><a href="http://www.codeproject.com/lounge.asp">Lounge</a></td>
	</tr>
	</tbody></table>
	</div>
</td>
</tr>
</tbody></table>
<script type="text/javascript">function Go(){return}</script>
<script type="text/javascript" src="allocator.asp_files/cpmenu_var.js"></script>
<script type="text/javascript" src="allocator.asp_files/menu10_com.js"></script>
<script type="text/javascript">
var MPH = document.getElementById("MPH");
if (MPH) MPH.style.display='none';
</script>
</td></tr>


<tr><td colspan="2">

	<table class="ArticleHeader" cellpadding="3" cellspacing="0" width="100%">
	<tbody><tr valign="top">
		<td class="smallText" style="padding-right: 10px;"><a href="http://www.codeproject.com/?cat=1">All Topics</a>, <a href="http://www.codeproject.com/?cat=2">MFC / C++</a> &gt;&gt; <a href="http://www.codeproject.com/cpp/">C++ / MFC</a> &gt;&gt; <a href="http://www.codeproject.com/cpp/#STL">STL</a><br>
			
			<br>
			<div style="font-weight: bold; font-size: 16pt;">C++ Standard Allocator, An Introduction and Implementation</div>
			<b>By <a href="http://www.codeproject.com/script/Articles/list_articles.asp?userid=203178">Lai Shiaw San Kent</a></b>.
			
			<br><br><div style="font-size: 12px;">Introduction to the allocator concept, as well as implementing a policy-driven allocator template class</div>
		</td>
		<td class="smallText" style="width: 200px;">
			C++ (VC7.1)<br> Windows<br> STL, Win32, VS<br> Dev<br>
			<span style="padding-right: 2ex;">Posted</span>: <b>19 Aug 2003</b><br>
			<span style="padding-right: 3ex;">Views</span>: <b>26,152</b>
		</td>
	</tr>
	
	

	


</tbody></table>
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr valign="top">

	
	<td rowspan="2" class="LHNavBar">
	
	<!-- Yes, there are IE hacks that will allow us to create a min-width DIV 
	     (eg http://www.webreference.com/programming/min-width/) but I couldn't
	     be arsed. Wait for it in v2.0 -->
	
	

<table class="MemberNavBar" style="border: 0pt none ; margin-bottom: 10px;" cellspacing="0">
<tbody><tr valign="top"><td><img src="allocator.asp_files/books2_sml.gif" height="16" width="16"></td><td class="smallText"><a href="http://www.amazon.com/gp/redirect.html?link_code=ur2&amp;tag=thecodeprojec-20&amp;camp=1789&amp;creative=9325&amp;location=/gp/browse%3Fnode=5">Programming books</a></td></tr><tr valign="top"><td></td><td></td></tr><tr valign="top"><td><img src="allocator.asp_files/support_icon.gif" height="16" width="16"></td><td class="smallText"><a href="http://www.codeproject.com/store/"><b>Ultimate Combo<br>MFC tools $449</b></a></td></tr><tr valign="top"><td></td><td></td></tr>

<tr valign="top">	
      <td><img src="allocator.asp_files/mail.gif" height="16" width="16"></td>
      <td class="SmallText">
<a href="http://www.codeproject.com/script/recommend/form.asp?guid=allocator%2Fcpp8%2F19%2F2003">Send to a friend</a></td>
</tr>

</tbody></table>
<center>
<script language="javascript">document.write("<a href=\"/script/admentor/admentorredir.asp?id=2247&way=ban\" target=_blank><img src=\"/script/ann/ServeImg.aspx?File=%2Fscript%2Fadmentor%2Fimages%2FToolbox%5F160x600%2Egif&C=False&id=2247&cb=2047360\" alt=\"\" border=0 width=160 height=600></a>");</script><a href="http://www.codeproject.com/script/admentor/admentorredir.asp?id=2247&amp;way=ban" target="_blank"><img src="allocator.asp_files/ServeImg.htm" alt="" border="0" height="600" width="160"></a>
</center>
<br><br>

	
	<img src="allocator.asp_files/t.gif" height="1" width="160">
	
	</td>
	

	<td width="100%">

		<table class="SearchHeaderBar" cellspacing="0" width="100%">
<tbody><tr>
<td align="right" nowrap="nowrap" valign="middle" width="60%">

	<form method="post" action="/info/search.asp" name="Search" style="margin: 0pt;">
	<b>Search &nbsp;</b><input class="smallText" name="target" style="width: 200px;">
	<select style="font-weight: bold; font-size: 8pt;" name="st">
		<option value="kw">Articles</option>
		<option value="au">Authors</option>
	</select>
	<input style="font-weight: bold; font-size: 8pt;" value=" Go! " type="submit"> &nbsp;
	</form>
</td>

<td class="tinyText" nowrap="nowrap">
<a href="http://www.codeproject.com/info/search.asp">Advanced Search</a><br>
<a href="http://www.codeproject.com/script/articles/sections.asp">Sitemap</a>
</td>
</tr>
</tbody></table>
		
		<table width="100%">
		<tbody><tr valign="top">
		<td class="SmallText" nowrap="nowrap"><table><tbody><tr><td class="smallText" nowrap="nowrap"><img src="allocator.asp_files/print.gif" align="absmiddle"> <a href="http://www.codeproject.com/cpp/allocator.asp?print=true" target="_print">Print</a></td><td class="smallText" nowrap="nowrap"><img src="allocator.asp_files/sitebuild_icon.gif" align="absmiddle"><a href="http://www.codeproject.com/script/submit/ReportProblem.asp?GUID=allocator%2Fcpp8%2F19%2F2003">Broken Article?</a></td><td class="smallText" nowrap="nowrap"><img src="allocator.asp_files/link.gif" align="absmiddle"><a href="http://www.codeproject.com/script/profile/add_bookmark.asp?t=0&amp;ct=%2Fcpp%2Fallocator%2Easp&amp;guid=allocator%2Fcpp8%2F19%2F2003">Bookmark</a></td><td class="smallText" nowrap="nowrap"><img src="allocator.asp_files/mail_small.gif" align="absmiddle"> <a href="#__comments">Discuss</a></td></tr></tbody></table>
		</td>
		<td align="right" nowrap="nowrap"><a name="__top"></a><table><tbody><tr><td class="smallText" align="right">16 votes  for this article.</td><td>
<table border="2" cellpadding="0" cellspacing="0"><tbody><tr>
<td><img src="allocator.asp_files/red.gif" border="0" height="5" width="20"></td>
<td><img src="allocator.asp_files/red.gif" border="0" height="5" width="20"></td>
<td><img src="allocator.asp_files/red.gif" border="0" height="5" width="20"></td>
<td><img src="allocator.asp_files/red.gif" border="0" height="5" width="20"></td>
<td><img src="allocator.asp_files/red.gif" border="0" height="5" width="3"><img src="allocator.asp_files/white.gif" border="0" height="5" width="17"></td>
</tr></tbody></table>
</td></tr><tr><td colspan="2" class="smallText" align="right"><a href="http://www.codeproject.com/script/articles/top_articles.asp?st=2" title="Calculated as rating x Log10(# votes)">Popularity: 4.99</a>. Rating: <b>4.15</b> out of 5.</td></tr></tbody></table></td></tr>
		</tbody></table>
		
			
	</td>
</tr>

<tr>
	<td class="ArticlePane">
<ul style="background-color: rgb(238, 238, 238); margin-right: 20px;"><li style="font-size: 8pt; list-style-image: url(/images/warning.gif);">You are signed up for one or more <a href="http://www.codeproject.com/script/profile/subscribe.asp">newsletters</a> but unfortunately we are unable to send you emails. Please click <a href="http://www.codeproject.com/script/profile/SendConfirmRequest.asp">here</a> to have an email sent that will allow us to confirm your email address.</li></ul>
<span name="intelliTxt" id="intelliTXT">
<div id="contentdiv">


<!-- Article Starts -->


<ul class="download">
<li><a href="http://www.codeproject.com/cpp/allocator/allocator.zip">Download source and demo files - 3.52 Kb</a> </li></ul>
<h2>Introduction</h2>
<p nd="1">The STL allocator is one of the most overlooked topic in most
C++ teachings. They are rarely used explicitly, either via direct
client code, or direct construction of an allocator to be used in a
container. The possible, and perhaps only area, where you might even
notice the word allocator is when you make use of the STL container
classes, and wonder what that last parameter (<code nd="2">Allocator</code>) actually is.</p>
<p nd="3">In this article I will explain the purpose of the allocator,
what qualifies as a Standard C++ allocator, how an allocator can be
implemented, as well as possible usages and extensions.</p>
<h2>The C++ standard purpose</h2>
<p nd="4">Described in [Josuttis 1999],</p>
<blockquote nd="5">....Allocators originally were introduced as part of
the STL to handle the nasty problem of different pointer types on PCs
(such as near, far, and huge pointers). They now serve as a base for
technical solutions that use certain memory models, such as shared
memory, garbage collection, and object-oriented databases, without
changing the interfaces. However, this use is relatively new and not
yet widely adopted ....Allocators represent a special memory model and
are an abstraction used to translate the need to use memory into a raw
call for memory. They provide an interface to allocate, create,
destroy, and deallocate objects. With allocators, containers and
algorithms can be parameterized by the way the elements are stored. For
example, you could implement allocators that use shared memory or that
map the elements to a persistent database...</blockquote>
<p nd="6">There is, indeed, very little information in [C++] on
allocators. It all boils down to simply two sections: 20.1.5 Allocator
requirements [<i>lib.allocator.requirements</i>], and 20.4.1 The default allocator [<i>lib.default.allocator</i>]. In fact, the most important part one should take note is in fact, 20.1.5.1,</p>
<blockquote nd="7">The library describes a standard set of requirements
for allocators, which are objects that encapsulate the information
about an allocation model. This information includes the knowledge of
pointer types, the type of their difference, the type of the size of
objects in this allocation model, as well as the memory allocation and
deallocation primitives for it. All of the containers (<code nd="8">_lib.containers_</code>) are parameterized in terms of allocators.</blockquote>
<p nd="9">The provided <code nd="10">std::allocator</code> in 20.4.1 is the only predefined and required allocator imposed by [C++] on all C++ compiler implementations.</p>
<h2>The C++ standard definition</h2>
<p nd="11">The standards require the allocator to define types of pointer to <code nd="12">T</code>(<code nd="13">pointer</code>), pointer to constant <code nd="14">T</code>(<code nd="15">const_pointer</code>), reference to <code nd="16">T</code>(<code nd="17">reference</code>), reference to constant <code nd="18">T</code>, type of <code nd="19">T</code> itself (<code nd="20">value_type</code>), an unsigned integral type that can represent the size of the largest object in the allocation model (<code nd="21">size_type</code>), as well as a signed integral type that can represent the difference between any two pointers in the allocation model (<code nd="22">difference_type</code>).</p>
<p nd="23">The standards then require a template class rebind member, which should pay heed of the following paragraph from 20.1.5.3</p>
<blockquote nd="24">The template class member rebind in the table above is effectively a template <code><span class="cpp-keyword">typedef</span></code>: if the name <code nd="25">Allocator</code> is bound to <code nd="26">SomeAllocator&lt;T&gt;</code>, then <code nd="27">Allocator::rebind&lt;U&gt;::other</code> is the same type as <code nd="28">SomeAllocator&lt;U&gt;</code>.</blockquote>
<p nd="29">In short, given <code nd="30">allocator&lt;T&gt;</code>, we can simply do <code nd="31">allocator::rebind&lt;U&gt;::other.allocate(<span class="cpp-literal">1</span>)</code> to be allocating memory large enough to hold an object <code nd="32">U</code>. This is the magic required for <code nd="33">std::list</code> to work properly, since given <code nd="34">std::list&lt;<span class="cpp-keyword">int</span>&gt;(allocator&lt;<span class="cpp-keyword">int</span>&gt;())</code>, <code nd="35">std::list</code> actually needs to allocate memory for <code nd="36">Node&lt;<span class="cpp-keyword">int</span>&gt;</code>, and not <code><span class="cpp-keyword">int</span></code>. Thus, they need to rebind to <code nd="37">allocator&lt;<span class="cpp-keyword">int</span>&gt;()::rebind&lt;Node&lt;<span class="cpp-keyword">int</span>&gt; &gt;::other</code> instead.</p>
<p nd="38">Next, we have to provide a function to simply return the address of a given object (<code nd="39">address</code>).</p>
<p nd="40">What follows is the heart of the allocator, a function to allocate memory for <code nd="41">n</code> objects of type <code nd="42">T</code> but not construct the objects (<code nd="43">allocate(n,u)</code>, where <code nd="44">u</code> is a hint for other memory models), as well a function to deallocate <code nd="45">n</code> objects of type <code nd="46">T</code> (<code nd="47">deallocate(p, n)</code>). Objects must be destroyed prior to this call.</p>
<p nd="48">As mentioned, <code nd="49">allocate</code> and <code nd="50">deallocate</code>
are simply low level memory management and do not play a part in object
construction and destruction. This would mean that the default usage of
the keywords <code><span class="cpp-keyword">new</span></code> and <code><span class="cpp-keyword">delete</span></code> would not apply in these functions. As any intermediate C++ programmer should know, the following code.</p><pre nd="51" lang="c++">A* a = <span class="cpp-keyword">new</span> A;
<span class="cpp-keyword">delete</span> a;</pre>
<p nd="52">is actually <sub nd="53">1</sub>interpreted by the compiler as</p><pre nd="54" lang="c++"><span class="cpp-comment">// assuming new throws std::bad_alloc upon failure</span>
A* a = ::<span class="cpp-keyword">operator</span> <span class="cpp-keyword">new</span>(<span class="cpp-keyword">sizeof</span>(A)); 
a-&gt;A::A();
<span class="cpp-keyword">if</span> ( a != <span class="cpp-literal">0</span> ) {  <span class="cpp-comment">// a check is necessary for delete</span>
    a-&gt;~A();
    ::<span class="cpp-keyword">operator</span> <span class="cpp-keyword">delete</span>(a);
}</pre>
<p nd="55">The purpose of the allocator is to <sub nd="56">2</sub>allocate
raw memory without construction of objects, as well as simply
deallocate memory without the need to destroy them, hence the usage of <code><span class="cpp-keyword">operator</span> <span class="cpp-keyword">new</span></code> and <code><span class="cpp-keyword">operator</span> <span class="cpp-keyword">delete</span></code> directly is preferred over the usage of the keywords <code><span class="cpp-keyword">new</span></code> and <code><span class="cpp-keyword">delete</span></code>.</p>
<p nd="57">Following these are helper functions to do copy construction (<code nd="58">construct(p, t)</code>) and destroy (<code nd="59">destroy(p)</code>) an object, as well as getting the largest value that can meaningfully be passed to allocate (<code nd="60">max_size</code>), copy constructor and default constructor, and the equality checking operators(<code nd="61">==</code> and <code nd="62">!=</code>).</p>
<h2>A sample allocator</h2>
<p nd="63">Below is a definition as well as implementation of an allocator that conforms to the C++ standards.</p><div class="smallText" id="premain2" style="width: 100%;"><img preid="2" src="allocator.asp_files/minus.gif" id="preimg2" height="9" width="9"><span nd="64" preid="2" style="margin-bottom: 0pt;" id="precollapse2"> Collapse</span></div><pre nd="65" style="margin-top: 0pt;" id="pre2" lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">class</span> Allocator {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-comment">//    typedefs</span>
    <span class="cpp-keyword">typedef</span> T value_type;
    <span class="cpp-keyword">typedef</span> value_type* pointer;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">const</span> value_type* const_pointer;
    <span class="cpp-keyword">typedef</span> value_type&amp; reference;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">const</span> value_type&amp; const_reference;
    <span class="cpp-keyword">typedef</span> std::size_t size_type;
    <span class="cpp-keyword">typedef</span> std::ptrdiff_t difference_type;

<span class="cpp-keyword">public</span> : 
    <span class="cpp-comment">//    convert an allocator&lt;T&gt; to allocator&lt;U&gt;</span>
    <span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> U&gt;
    <span class="cpp-keyword">struct</span> rebind {
        <span class="cpp-keyword">typedef</span> Allocator&lt;U&gt; other;
    };

<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> Allocator() {}
    <span class="cpp-keyword">inline</span> ~Allocator() {}
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> Allocator(Allocator <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> U&gt;
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> Allocator(Allocator&lt;U&gt; <span class="cpp-keyword">const</span>&amp;) {}

    <span class="cpp-comment">//    address</span>
    <span class="cpp-keyword">inline</span> pointer address(reference r) { <span class="cpp-keyword">return</span> &amp;r; }
    <span class="cpp-keyword">inline</span> const_pointer address(const_reference r) { <span class="cpp-keyword">return</span> &amp;r; }

    <span class="cpp-comment">//    memory allocation</span>
    <span class="cpp-keyword">inline</span> pointer allocate(size_type cnt, 
       <span class="cpp-keyword">typename</span> std::allocator&lt;<span class="cpp-keyword">void</span>&gt;::const_pointer = <span class="cpp-literal">0</span>) { 
      <span class="cpp-keyword">return</span> <span class="cpp-keyword">reinterpret_cast</span>&lt;pointer&gt;(::<span class="cpp-keyword">operator</span> <span class="cpp-keyword">new</span>(cnt * <span class="cpp-keyword">sizeof</span> (T))); 
    }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">void</span> deallocate(pointer p, size_type) { 
        ::<span class="cpp-keyword">operator</span> <span class="cpp-keyword">delete</span>(p); 
    }

    <span class="cpp-comment">//    size</span>
    <span class="cpp-keyword">inline</span> size_type max_size() <span class="cpp-keyword">const</span> { 
        <span class="cpp-keyword">return</span> std::numeric_limits&lt;size_type&gt;::max() / <span class="cpp-keyword">sizeof</span>(T);
 }

    <span class="cpp-comment">//    construction/destruction</span>
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">void</span> construct(pointer p, <span class="cpp-keyword">const</span> T&amp; t) { <span class="cpp-keyword">new</span>(p) T(t); }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">void</span> destroy(pointer p) { p-&gt;~T(); }

    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>==(Allocator <span class="cpp-keyword">const</span>&amp;) { <span class="cpp-keyword">return</span> <span class="cpp-keyword">true</span>; }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>!=(Allocator <span class="cpp-keyword">const</span>&amp; a) { <span class="cpp-keyword">return</span> !<span class="cpp-keyword">operator</span>==(a); }
};    <span class="cpp-comment">//    end of class Allocator </span></pre>
<p nd="66">This is the basic implementation of an allocator, which should be similar to most <code nd="67">std::allocator</code> provided by your compiler's vendor. However, to the experienced reader, one could immediately identify a possible error. <code nd="68">&amp;r</code> could only work if <code nd="69">T</code> did not provide an overloaded <code nd="70"><span class="cpp-keyword">operator</span> &amp;</code>, and if <code nd="71">T</code>
should, must return the address of the object. Otherwise, the user
cannot have a reliable means of obtaining the address of an object <code nd="72">T</code>.</p>
<h2>Decomposing allocator into policies and traits<sub>3</sub></h2>
<p nd="73">Addressing the above address issue (pun intended), it is only logical that we should allow the creator of <code nd="74">T</code> to actually provide us with the means of obtaining the right address of object <code nd="75">T</code>. Following a similar design of STL, we could come up with a <code nd="76">Trait</code> class to provide such a means. As we identified logical designs that should be lifted into a <code nd="77">Trait</code> class, we should come up with the following design.</p><pre nd="78" lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">class</span> ObjectTraits {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-comment">//    convert an ObjectTraits&lt;T&gt; to ObjectTraits&lt;U&gt;</span>
    <span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> U&gt;
    <span class="cpp-keyword">struct</span> rebind {
        <span class="cpp-keyword">typedef</span> ObjectTraits&lt;U&gt; other;
    };

<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> ObjectTraits() {}
    <span class="cpp-keyword">inline</span> ~ObjectTraits() {}
    <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span> U&gt;
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> ObjectTraits(ObjectTraits&lt;U&gt; <span class="cpp-keyword">const</span>&amp;) {}

    <span class="cpp-comment">//    address</span>
    <span class="cpp-keyword">inline</span> T* address(T&amp; r) { <span class="cpp-keyword">return</span> &amp;r; }
    <span class="cpp-keyword">inline</span> T <span class="cpp-keyword">const</span>* address(T <span class="cpp-keyword">const</span>&amp; r) { <span class="cpp-keyword">return</span> &amp;r; }

    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">void</span> construct(T* p, <span class="cpp-keyword">const</span> T&amp; t) { <span class="cpp-keyword">new</span>(p) T(t); }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">void</span> destroy(T* p) { p-&gt;~T(); }
};    <span class="cpp-comment">//    end of class ObjectTraits</span></pre>
<p nd="79">As noted, we have <code nd="80">construct</code>/<code nd="81">destroy</code> in as well, since the way the object are constructed/destroyed should be defined by the trait of object <code nd="82">T</code>. However, take note that <code nd="83">construct</code>/<code nd="84">destroy</code>
are not always called upon after memory allocation by the containers,
nor before memory deallocation by the containers. This is because the
containers do not construct objects, they construct copies of objects<sub nd="85">2</sub>. Thus, <code nd="86">construct</code>/<code nd="87">destroy</code> will not be a reliable means to check for object construction/destruction.</p>
<p nd="88">With the <code nd="89">ObjectTraits</code>, should a creator of <code nd="90">T</code> decide to <code nd="91">construct</code>, <code>destroy</code>, or overload <code><span class="cpp-keyword">operator</span> &amp;</code>, he could do a complete template specialization of <code>ObjectTraits</code> for his purpose.</p>
<p>Following traits, we can also abstract the actual memory allocation/deallocation code into a policy itself.</p><div class="smallText" id="premain4" style="width: 100%;"><img preid="4" src="allocator.asp_files/minus.gif" id="preimg4" height="9" width="9"><span preid="4" style="margin-bottom: 0pt;" id="precollapse4"> Collapse</span></div><pre style="margin-top: 0pt;" id="pre4" lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T&gt;
<span class="cpp-keyword">class</span> StandardAllocPolicy {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-comment">//    typedefs</span>
    <span class="cpp-keyword">typedef</span> T value_type;
    <span class="cpp-keyword">typedef</span> value_type* pointer;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">const</span> value_type* const_pointer;
    <span class="cpp-keyword">typedef</span> value_type&amp; reference;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">const</span> value_type&amp; const_reference;
    <span class="cpp-keyword">typedef</span> std::size_t size_type;
    <span class="cpp-keyword">typedef</span> std::ptrdiff_t difference_type;

<span class="cpp-keyword">public</span> : 
    <span class="cpp-comment">//    convert an StandardAllocPolicy&lt;T&gt; to StandardAllocPolicy&lt;U&gt;</span>
    <span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> U&gt;
    <span class="cpp-keyword">struct</span> rebind {
        <span class="cpp-keyword">typedef</span> StandardAllocPolicy&lt;U&gt; other;
    };

<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> StandardAllocPolicy() {}
    <span class="cpp-keyword">inline</span> ~StandardAllocPolicy() {}
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> StandardAllocPolicy(StandardAllocPolicy <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span> U&gt;
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> StandardAllocPolicy(StandardAllocPolicy&lt;U&gt; <span class="cpp-keyword">const</span>&amp;) {}
    
    <span class="cpp-comment">//    memory allocation</span>
    <span class="cpp-keyword">inline</span> pointer allocate(size_type cnt, 
      <span class="cpp-keyword">typename</span> std::allocator&lt;<span class="cpp-keyword">void</span>&gt;::const_pointer = <span class="cpp-literal">0</span>) { 
        <span class="cpp-keyword">return</span> <span class="cpp-keyword">reinterpret_cast</span>&lt;pointer&gt;(::<span class="cpp-keyword">operator</span> 
                                      <span class="cpp-keyword">new</span>(cnt * <span class="cpp-keyword">sizeof</span> (T))); 
    }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">void</span> deallocate(pointer p, size_type) 
                            { ::<span class="cpp-keyword">operator</span> <span class="cpp-keyword">delete</span>(p); }

    <span class="cpp-comment">//    size</span>
    <span class="cpp-keyword">inline</span> size_type max_size() <span class="cpp-keyword">const</span> { 
        <span class="cpp-keyword">return</span> std::numeric_limits&lt;size_type&gt;::max(); 
    }
};    <span class="cpp-comment">//    end of class StandardAllocPolicy</span>

<span class="cpp-comment">// determines if memory from another</span>
<span class="cpp-comment">// allocator can be deallocated from this one</span>
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> T2&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>==(StandardAllocPolicy&lt;T&gt; <span class="cpp-keyword">const</span>&amp;, 
                        StandardAllocPolicy&lt;T2&gt; <span class="cpp-keyword">const</span>&amp;) { 
    <span class="cpp-keyword">return</span> <span class="cpp-keyword">true</span>;
}
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> OtherAllocator&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>==(StandardAllocPolicy&lt;T&gt; <span class="cpp-keyword">const</span>&amp;, 
                                     OtherAllocator <span class="cpp-keyword">const</span>&amp;) { 
    <span class="cpp-keyword">return</span> <span class="cpp-keyword">false</span>; 
}</pre>
<p>The allocation policy determines how the memory allocation/deallocation works, the maximum number of objects of type <code>T</code>
that can be allocated, as well as the equality checks to determine if
other allocators can allocate and deallocate between allocators
interchangeably.</p>
<p>With a simple trait and allocation policy completed, we can now build upon an extensible allocator interface.</p><div class="smallText" id="premain5" style="width: 100%;"><img preid="5" src="allocator.asp_files/minus.gif" id="preimg5" height="9" width="9"><span preid="5" style="margin-bottom: 0pt;" id="precollapse5"> Collapse</span></div><pre style="margin-top: 0pt;" id="pre5" lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> Policy = 
  StandardAllocPolicy&lt;T&gt;, <span class="cpp-keyword">typename</span> Traits = ObjectTraits&lt;T&gt; &gt;
<span class="cpp-keyword">class</span> Allocator : <span class="cpp-keyword">public</span> Policy, <span class="cpp-keyword">public</span> Traits {
<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">typedef</span> Policy AllocationPolicy;
    <span class="cpp-keyword">typedef</span> Traits TTraits;

<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">typename</span> AllocationPolicy::size_type size_type;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">typename</span> AllocationPolicy::difference_type difference_type;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">typename</span> AllocationPolicy::pointer pointer;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">typename</span> AllocationPolicy::const_pointer const_pointer;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">typename</span> AllocationPolicy::reference reference;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">typename</span> AllocationPolicy::const_reference const_reference;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">typename</span> AllocationPolicy::value_type value_type;

<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> U&gt;
    <span class="cpp-keyword">struct</span> rebind {
        <span class="cpp-keyword">typedef</span> Allocator&lt;U, <span class="cpp-keyword">typename</span> AllocationPolicy::rebind&lt;U&gt;::other, 
            <span class="cpp-keyword">typename</span> TTraits::rebind&lt;U&gt;::other &gt; other;
    };

<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> Allocator() {}
    <span class="cpp-keyword">inline</span> ~Allocator() {}
    <span class="cpp-keyword">inline</span> Allocator(Allocator <span class="cpp-keyword">const</span>&amp; rhs):Traits(rhs), Policy(rhs) {}
    <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span> U&gt;
    <span class="cpp-keyword">inline</span> Allocator(Allocator&lt;U&gt; <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span> U, <span class="cpp-keyword">typename</span> P, <span class="cpp-keyword">typename</span> T2&gt;
    <span class="cpp-keyword">inline</span> Allocator(Allocator&lt;U, P, 
       T2&gt; <span class="cpp-keyword">const</span>&amp; rhs):Traits(rhs), Policy(rhs) {}
};    <span class="cpp-comment">//    end of class Allocator</span>

<span class="cpp-comment">// determines if memory from another</span>
<span class="cpp-comment">// allocator can be deallocated from this one</span>
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> P, <span class="cpp-keyword">typename</span> Tr&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>==(Allocator&lt;T, P, 
   Tr&gt; <span class="cpp-keyword">const</span>&amp; lhs, Allocator&lt;T, 
   P, Tr&gt; <span class="cpp-keyword">const</span>&amp; rhs) { 
    <span class="cpp-keyword">return</span> <span class="cpp-keyword">operator</span>==(<span class="cpp-keyword">static_cast</span>&lt;P&amp;&gt;(lhs), 
                       <span class="cpp-keyword">static_cast</span>&lt;P&amp;&gt;(rhs)); 
}
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> P, <span class="cpp-keyword">typename</span> Tr, 
        <span class="cpp-keyword">typename</span> T2, <span class="cpp-keyword">typename</span> P2, <span class="cpp-keyword">typename</span> Tr2&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>==(Allocator&lt;T, P, 
    Tr&gt; <span class="cpp-keyword">const</span>&amp; lhs, Allocator&lt;T2, P2, Tr2&gt; <span class="cpp-keyword">const</span>&amp; rhs) { 
      <span class="cpp-keyword">return</span> <span class="cpp-keyword">operator</span>==(<span class="cpp-keyword">static_cast</span>&lt;P&amp;&gt;(lhs), 
                       <span class="cpp-keyword">static_cast</span>&lt;P2&amp;&gt;(rhs)); 
}
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> P, <span class="cpp-keyword">typename</span> Tr, <span class="cpp-keyword">typename</span> OtherAllocator&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>==(Allocator&lt;T, P, 
          Tr&gt; <span class="cpp-keyword">const</span>&amp; lhs, OtherAllocator <span class="cpp-keyword">const</span>&amp; rhs) { 
    <span class="cpp-keyword">return</span> <span class="cpp-keyword">operator</span>==(<span class="cpp-keyword">static_cast</span>&lt;P&amp;&gt;(lhs), rhs); 
}
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> P, <span class="cpp-keyword">typename</span> Tr&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>!=(Allocator&lt;T, P, Tr&gt; <span class="cpp-keyword">const</span>&amp; lhs, 
                         Allocator&lt;T, P, Tr&gt; <span class="cpp-keyword">const</span>&amp; rhs) { 
    <span class="cpp-keyword">return</span> !<span class="cpp-keyword">operator</span>==(lhs, rhs); 
}
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> P, <span class="cpp-keyword">typename</span> Tr, 
           <span class="cpp-keyword">typename</span> T2, <span class="cpp-keyword">typename</span> P2, <span class="cpp-keyword">typename</span> Tr2&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>!=(Allocator&lt;T, P, Tr&gt; <span class="cpp-keyword">const</span>&amp; lhs, 
                   Allocator&lt;T2, P2, Tr2&gt; <span class="cpp-keyword">const</span>&amp; rhs) { 
    <span class="cpp-keyword">return</span> !<span class="cpp-keyword">operator</span>==(lhs, rhs); 
}
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> P, <span class="cpp-keyword">typename</span> Tr, 
                              <span class="cpp-keyword">typename</span> OtherAllocator&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>!=(Allocator&lt;T, P, 
        Tr&gt; <span class="cpp-keyword">const</span>&amp; lhs, OtherAllocator <span class="cpp-keyword">const</span>&amp; rhs) { 
    <span class="cpp-keyword">return</span> !<span class="cpp-keyword">operator</span>==(lhs, rhs); 
}</pre>
<p>Notice the usage of public inheritance of policy and traits, as
opposed to having them as a member data. This enables each allocator
instance to have his own memory management model (via the policy), as
well as take advantage of EBCO (Empty Base Class Optimization) if
available by the compiler, since in most cases, traits would be an
empty class.</p>
<p>The <code>Allocator</code> class usage is as simple as follows,</p><pre lang="c++">std::vector&lt;<span class="cpp-keyword">int</span>, Allocator&lt;<span class="cpp-keyword">int</span>&gt; &gt; v;</pre>
<h2>Memory allocation tracking policy implementation</h2>
<p>The previous listed allocator does the most basic memory management.
Building on a working model, we could actually perform profiling on
memory management, for example, by having the following memory
allocation tracking policy,</p><div class="smallText" id="premain7" style="width: 100%;"><img preid="7" src="allocator.asp_files/minus.gif" id="preimg7" height="9" width="9"><span preid="7" style="margin-bottom: 0pt;" id="precollapse7"> Collapse</span></div><pre style="margin-top: 0pt;" id="pre7" lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> Policy = StandardAllocPolicy&lt;T&gt; &gt;
<span class="cpp-keyword">class</span> TrackAllocPolicy : <span class="cpp-keyword">public</span> Policy {
<span class="cpp-keyword">private</span> : 
    <span class="cpp-keyword">typedef</span> Policy AllocationPolicy;

<span class="cpp-keyword">public</span> : 
    <span class="cpp-comment">//    convert an TrackAllocPolicy&lt;T&gt; to TrackAllocPolicy&lt;U&gt;</span>
    <span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> U&gt;
    <span class="cpp-keyword">struct</span> rebind {
        <span class="cpp-keyword">typedef</span> TrackAllocPolicy&lt;U, 
           <span class="cpp-keyword">typename</span> AllocationPolicy::rebind&lt;U&gt;::other&gt; other;
    };

<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> TrackAllocPolicy():total_(<span class="cpp-literal">0</span>), current_(<span class="cpp-literal">0</span>), peak_(<span class="cpp-literal">0</span>) {}
    <span class="cpp-keyword">inline</span> ~TrackAllocPolicy() {}
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> 
        TrackAllocPolicy(TrackAllocPolicy <span class="cpp-keyword">const</span>&amp; rhs):Policy(rhs), 
        total_(rhs.total_), current_(rhs.current_), peak_(rhs.peak_) {}
    <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span> U&gt;
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> 
       TrackAllocPolicy(TrackAllocPolicy&lt;U&gt; <span class="cpp-keyword">const</span>&amp; rhs):Policy(rhs), 
       total_(<span class="cpp-literal">0</span>), current_(<span class="cpp-literal">0</span>), peak_(<span class="cpp-literal">0</span>) {}

    <span class="cpp-comment">//    memory allocation</span>
    <span class="cpp-keyword">typename</span> AllocationPolicy::pointer 
      allocate(<span class="cpp-keyword">typename</span> AllocationPolicy::size_type cnt, 
      <span class="cpp-keyword">typename</span> std::allocator&lt;<span class="cpp-keyword">void</span>&gt;::const_pointer hint = <span class="cpp-literal">0</span>) { 
        <span class="cpp-keyword">typename</span> AllocationPolicy::pointer p = 
               AllocationPolicy::allocate(cnt, hint);
        <span class="cpp-keyword">this</span>-&gt;total_ += cnt;
        <span class="cpp-keyword">this</span>-&gt;current_ += cnt;
        <span class="cpp-keyword">if</span> ( <span class="cpp-keyword">this</span>-&gt;current_ &gt; <span class="cpp-keyword">this</span>-&gt;peak_ ) {
            <span class="cpp-keyword">this</span>-&gt;peak_ = <span class="cpp-keyword">this</span>-&gt;current_;
        }
        <span class="cpp-keyword">return</span> p;
    }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">void</span> deallocate(<span class="cpp-keyword">typename</span> AllocationPolicy::pointer p, 
        <span class="cpp-keyword">typename</span> AllocationPolicy::size_type cnt) { 
        AllocationPolicy::deallocate(p, cnt);
        <span class="cpp-keyword">this</span>-&gt;current_ -= cnt;
    }

    <span class="cpp-comment">// get stats</span>
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">typename</span> AllocationPolicy::size_type 
          TotalAllocations() { <span class="cpp-keyword">return</span> <span class="cpp-keyword">this</span>-&gt;total_; }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">typename</span> AllocationPolicy::size_type 
          CurrentAllocations() { <span class="cpp-keyword">return</span> <span class="cpp-keyword">this</span>-&gt;current_; }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">typename</span> AllocationPolicy::size_type 
          PeakAllocations() { <span class="cpp-keyword">return</span> <span class="cpp-keyword">this</span>-&gt;peak_; }

<span class="cpp-keyword">private</span> : 
    <span class="cpp-comment">//    total allocations</span>
    <span class="cpp-keyword">typename</span> AllocationPolicy::size_type total_;    
    <span class="cpp-comment">//    current allocations</span>
    <span class="cpp-keyword">typename</span> AllocationPolicy::size_type current_; 
    <span class="cpp-comment">//    peak allocations   </span>
    <span class="cpp-keyword">typename</span> AllocationPolicy::size_type peak_;    
};    <span class="cpp-comment">//    end of class TrackAllocPolicy</span>

<span class="cpp-comment">// determines if memory from another</span>
<span class="cpp-comment">// allocator can be deallocated from this one</span>
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> Policy, <span class="cpp-keyword">typename</span> T2, <span class="cpp-keyword">typename</span> Policy2&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>==(TrackAllocPolicy&lt;T, Policy&gt; <span class="cpp-keyword">const</span>&amp; lhs, 
        TrackAllocPolicy&lt;T2, Policy2&gt; <span class="cpp-keyword">const</span>&amp; rhs) { 
  <span class="cpp-keyword">return</span> <span class="cpp-keyword">operator</span>==(<span class="cpp-keyword">static_cast</span>&lt;Policy&amp;&gt;(lhs), 
                   <span class="cpp-keyword">static_cast</span>&lt;Policy&amp;&gt;(rhs)); 
}
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, <span class="cpp-keyword">typename</span> Policy, <span class="cpp-keyword">typename</span> OtherAllocator&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>==(TrackAllocPolicy&lt;T, 
     Policy&gt; <span class="cpp-keyword">const</span>&amp; lhs, OtherAllocator <span class="cpp-keyword">const</span>&amp; rhs) { 
  <span class="cpp-keyword">return</span> <span class="cpp-keyword">operator</span>==(<span class="cpp-keyword">static_cast</span>&lt;Policy&amp;&gt;(lhs), rhs); 
}</pre>
<p>This allocation policy merely adds tracking capability, and is built
upon another/actual memory allocation policy, determined by the second
template argument.</p>
<p>The class usage is as simple as follows,</p><pre lang="c++">std::vector&lt;<span class="cpp-keyword">int</span>, Allocator&lt;<span class="cpp-keyword">int</span>, TrackAllocPolicy&lt;<span class="cpp-keyword">int</span>&gt; &gt; &gt; v;</pre>
<h2>Small Object Allocator</h2>
<p>Another possible implementation of an allocation policy might be
optimization for small objects allocation. Frequent
allocation/deallocation of small objects from the free store can, at
times, hurt the performance of an application. A work-around for this
is to allocate a block of large memory at one time, and hand out these
memory to the application upon request. Deallocated small objects are
returned to the block, and reused at a later date.</p>
<p>Since Loki<sub>5</sub> has a Small Object Allocator class done, it would be logical for us to adapt it as our allocator.</p><div class="smallText" id="premain9" style="width: 100%;"><img preid="9" src="allocator.asp_files/minus.gif" id="preimg9" height="9" width="9"><span preid="9" style="margin-bottom: 0pt;" id="precollapse9"> Collapse</span></div><pre style="margin-top: 0pt;" id="pre9" lang="c++"><span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, std::size_t numBlocks = <span class="cpp-literal">64</span>&gt;
<span class="cpp-keyword">class</span> SmallObjectAllocPolicy {
<span class="cpp-keyword">public</span> : 
    <span class="cpp-comment">//    typedefs</span>
    <span class="cpp-keyword">typedef</span> T value_type;
    <span class="cpp-keyword">typedef</span> value_type* pointer;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">const</span> value_type* const_pointer;
    <span class="cpp-keyword">typedef</span> value_type&amp; reference;
    <span class="cpp-keyword">typedef</span> <span class="cpp-keyword">const</span> value_type&amp; const_reference;
    <span class="cpp-keyword">typedef</span> std::size_t size_type;
    <span class="cpp-keyword">typedef</span> std::ptrdiff_t difference_type;

<span class="cpp-keyword">public</span> : 
    <span class="cpp-comment">//    convert an SmallObjectAllocPolicy&lt;T&gt; to SmallObjectAllocPolicy&lt;U&gt;</span>
    <span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> U&gt;
    <span class="cpp-keyword">struct</span> rebind {
        <span class="cpp-keyword">typedef</span> SmallObjectAllocPolicy&lt;U, numBlocks&gt; other;
    };

<span class="cpp-keyword">public</span> : 
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> SmallObjectAllocPolicy() {}
    <span class="cpp-keyword">inline</span> ~SmallObjectAllocPolicy() {}
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> SmallObjectAllocPolicy(SmallObjectAllocPolicy <span class="cpp-keyword">const</span>&amp;) {}
    <span class="cpp-keyword">template</span> &lt;<span class="cpp-keyword">typename</span> T2, std::size_t N2&gt;
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">explicit</span> 
      SmallObjectAllocPolicy(SmallObjectAllocPolicy&lt;T2, N2&gt; <span class="cpp-keyword">const</span>&amp;) {}

    <span class="cpp-comment">//    memory allocation</span>
    <span class="cpp-keyword">inline</span> pointer allocate(size_type cnt, 
          <span class="cpp-keyword">typename</span> std::allocator&lt;<span class="cpp-keyword">void</span>&gt;::const_pointer = <span class="cpp-literal">0</span>) {
        <span class="cpp-keyword">return</span> <span class="cpp-keyword">reinterpret_cast</span>&lt;T*&gt;(allocator_.Allocate(<span class="cpp-keyword">sizeof</span>(T) * cnt));
    }
    <span class="cpp-keyword">inline</span> <span class="cpp-keyword">void</span> deallocate(pointer p, size_type cnt) {
        allocator_.Deallocate(p, <span class="cpp-keyword">sizeof</span>(T) * cnt);
    }

    <span class="cpp-comment">//    size</span>
    <span class="cpp-keyword">inline</span> size_type max_size() <span class="cpp-keyword">const</span> { 
        <span class="cpp-keyword">return</span> std::numeric_limits&lt;size_type&gt;::max() / <span class="cpp-keyword">sizeof</span>(T); 
    }

<span class="cpp-keyword">private</span>:
    <span class="cpp-keyword">static</span> Loki::SmallObjAllocator allocator_;
};    <span class="cpp-comment">//    end of class SmallObjectAllocPolicy</span>

<span class="cpp-comment">//    optimized for single small object, </span>
<span class="cpp-comment">//    hence chunk size and max object size is small</span>
<span class="cpp-comment">//    otherwise using free store</span>
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, std::size_t numBlocks&gt;
Loki::SmallObjAllocator SmallObjectAllocPolicy&lt;T, 
         numBlocks&gt;::allocator_(numBlocks * <span class="cpp-keyword">sizeof</span>(T), <span class="cpp-keyword">sizeof</span>(T));

<span class="cpp-comment">//    determines if memory from another allocator</span>
<span class="cpp-comment">//    can be deallocated from this one</span>
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, std::size_t N&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>==(SmallObjectAllocPolicy&lt;T, N&gt; <span class="cpp-keyword">const</span>&amp;, 
        SmallObjectAllocPolicy&lt;T, N&gt; <span class="cpp-keyword">const</span>&amp;) { 
    <span class="cpp-keyword">return</span> <span class="cpp-keyword">true</span>;
}
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, std::size_t N, <span class="cpp-keyword">typename</span> T2, std::size_t N2&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>==(SmallObjectAllocPolicy&lt;T, 
       N&gt; <span class="cpp-keyword">const</span>&amp;, SmallObjectAllocPolicy&lt;T2, N2&gt; <span class="cpp-keyword">const</span>&amp;) { 
    <span class="cpp-keyword">return</span> <span class="cpp-keyword">false</span>;
}
<span class="cpp-keyword">template</span>&lt;<span class="cpp-keyword">typename</span> T, std::size_t N, <span class="cpp-keyword">typename</span> OtherAllocator&gt;
<span class="cpp-keyword">inline</span> <span class="cpp-keyword">bool</span> <span class="cpp-keyword">operator</span>==(SmallObjectAllocPolicy&lt;T, 
            N&gt; <span class="cpp-keyword">const</span>&amp;, OtherAllocator <span class="cpp-keyword">const</span>&amp;) { 
    <span class="cpp-keyword">return</span> <span class="cpp-keyword">false</span>; 
}</pre>
<p>If you would like to understand how Loki's <code>SmallObjAllocator</code> works, remember to check out the code provided with Loki, or purchase [Alexandrescu 2001].</p>
<p>Using the <code>SmallObjectAllocator</code> is easy as well.</p><pre lang="c++">std::list&lt;<span class="cpp-keyword">int</span>, Allocator&lt;<span class="cpp-keyword">int</span>, SmallObjectAllocPolicy&lt;<span class="cpp-keyword">int</span>, <span class="cpp-literal">64</span>&gt; &gt; &gt; vTest;</pre>
<p>If you had looked into the Loki's <code>SmallObjAllocator</code>,
you would note that it works best for single allocation of a fixed size
(for allocation of different sizes, they actually create different
internal allocators). Thus, it would not work well with <code>std::vector</code> or other similar containers that does allocation of a block of memory (and of varied size).</p>
<p>Of course, if before hand, you knew the maximum size of your structure, you could do the following as well, </p><pre lang="c++">std::vector&lt;<span class="cpp-keyword">int</span>&gt; v;
v.reserve(<span class="cpp-literal">10</span>);</pre>
<p>Alternatively, if you want to do away with dynamic memory
allocation, you could declare an allocator that provides a fixed-sized
array, though with the way <code>std::vector</code> takes in an
allocator as its constructor, you would end up with an unnecessary
temporary. (Nevertheless, the codes are provided in the source, and it
only works if and only if you know the size before hand, and have used
the <code>reserve</code> function)</p>
<h2>Resolving multi-threading issues</h2>
<p>Initially I had wanted to have custom threading policies in the <code>Allocator</code> class, because, for example, there's <code>SmallObjectAllocator</code>, which used a shared memory pool for giving out objects <code>T</code>. Multiple thread using <code>SmallObjectAllocator&lt;T, N&gt;</code>
might actually cause inconsistent state of the keeping track of
internal memory pool. Except that a mutex/lock of any form didn't work
out in the <code>Allocator</code> (Thanks to Sean Kent for pointing that out), and even in <code>SmallObjectAllocator&lt;T, N&gt;,</code> since it is still different instances, but sharing the same static <code>Loki::SmallObjAllocator</code>. The only possible solution would be to actually perform the lock/mutex within a wrapper for <code>Loki::SmallObjAllocator</code>, or even <code>Loki::SmallObjAllocator</code> itself.</p>
<p>Thus, this implementation is actually not thread-safe by itself (at least in the case of <code>SmallObjectAllocator</code>).</p>
<h2>Conclusion</h2>
<p>The allocator concept is a very powerful method to encapsulate your
memory management model, and it does not touch on the overloading
operator <code><span class="cpp-keyword">new</span></code> and <code><span class="cpp-keyword">delete</span></code>,
which some see it as bad form or evil. With allocators, you can plug
memory tracking, optimized memory management model for certain objects,
etc into your containers. If you designed and built your framework
around allocators, the possibilities are immerse.</p>
<p>Of course, do not go into the "Golden hammer" syndrome, or what some
would describe as "When you have a hammer, everything else looks like a
nail". There are certain designs where plugging in an allocator would
not be logical, and although not much harm can be done (other than
perhaps build times and dependency), it offers not much benefit as well.</p>
<h2>Footnotes</h2>
<p><b><sup>1</sup></b> Described in [Lippman 1996], Chp 5, Semantics of Construction, and Copy.</p>
<p><b><sup>2</sup></b> In STL Containers, there is no need for
construction of objects via the default constructor, because the data
in the container are merely a copy created from the actual data
inserted (using the copy constructor).</p>
<p><b><sup>3</sup></b> Credits and recognition should be given to Sean
Kent for the original idea and implementation of the policy-based
allocator. Note that there are similarities and differences between the
version described here and his original version.</p>
<p><b><sup>4</sup></b> Refer to <a href="http://www.codeproject.com/useritems/cpppts.asp">Template Specialisation - An Introductory Survey</a> By Henrik Stuart for an excellent introduction and explanation on template specialization.</p>
<p><b><sup>5</sup></b> Remember to <a href="http://sourceforge.net/projects/loki-lib/" target="_blank">download the Loki library</a>.</p>
<h2>References</h2>
<ul>
<li>[Josuttis 1999]: Nicolai M. Josuttis, <i>The C++ Standard Library: A Tutorial and Reference</i> Addison-Wesley Pub Co 1999 
</li><li>[C++]: C++ Standards, 1998 
</li><li>[Lippman 1996]: Stanley B. Lippman, <i>Inside the C++ Object Model</i> Addison-Wesley Pub Co, 1996 
</li><li>[Alexandrescu 2001]: Andrei Alexandrescu, <i>Modern C++ Design: Generic Programming and Design Patterns Applied</i>. Addison-Wesley Pub Co, 2001 </li></ul>
<h2>History</h2>
<ul>
<li>19th August 2003: Initial version uploaded. </li></ul>

<!-- Article Ends -->



</div>
</span>

<script type="text/javascript" src="allocator.asp_files/togglePre.js"></script>

<h2>Lai Shiaw San Kent</h2>
<div style="overflow: hidden;"><table border="0"><tbody><tr valign="top"><td class="smallText" nowrap="nowrap"><br></td><td class="smallText"><p class="smallText">Click <a href="http://www.codeproject.com/script/profile/whos_who.asp?vt=arts&amp;id=203178">here</a> to view Lai Shiaw San Kent's online profile.</p></td></tr></tbody></table></div><br>
<table border="0" cellpadding="4" width="100%"><tbody><tr valign="top">
<td width="100%"><h2>Other popular C++ / MFC articles:</h2><ul><li><a href="http://www.codeproject.com/cpp/FastDelegate.asp">Member Function Pointers and the Fastest Possible C++ Delegates</a><div class="smallText">A comprehensive tutorial on member function pointers, and an implementation of delegates that generates only two ASM opcodes!</div></li><li><a href="http://www.codeproject.com/cpp/exceptionhandler.asp">How a C++ compiler implements exception handling</a><div class="smallText">An indepth discussion of how VC++ implements exception handling. Source code includes exception handling library for VC++.</div></li><li><a href="http://www.codeproject.com/cpp/Differentiation.asp">Symbolic Differentiation</a><div class="smallText">This article demonstrates differentiating expressions using a stack and displaying the input expression and its derivative.</div></li><li><a href="http://www.codeproject.com/cpp/pointers.asp">A Beginner's Guide to Pointers</a><div class="smallText">An article showing the use of pointers in C and C++</div></li></ul></td>
<td width="360">
<script language="javascript">document.write("<IFRAME src=\"/script/ann/ServeHTML.aspx?C=False&id=2257&cb=2047366\" border=0 frameborder=0 scrolling=no width=300 height=250></IFRAME>");</script><iframe src="allocator.asp_files/ServeHTML.htm" border="0" frameborder="0" height="250" scrolling="no" width="300"></iframe>
</td>
</tr></tbody></table>

		<form action="/script/rating/code/app/insert_vote.asp" method="post">
		<input name="vote_name" value="allocator/cpp8/19/2003" type="hidden">
		<input name="goal" value="/cpp/allocator.asp" type="hidden">

<table bgcolor="#ff9900" border="0" cellpadding="1" cellspacing="0" width="100%">
<tbody><tr><td width="100%">
<table bgcolor="#fbedbb" border="0" cellpadding="4" cellspacing="0" width="100%"><tbody><tr>
<td class="smalltext" valign="middle">[<a href="#__top">Top</a>]</td>
<td align="right" nowrap="nowrap" valign="middle">
<i><b>Rate this Article for us!</b></i>&nbsp;&nbsp;&nbsp;&nbsp; <i>Poor</i><input value="1" name="rate" type="radio"><input value="2" name="rate" type="radio"><input value="3" name="rate" type="radio"><input value="4" name="rate" type="radio"><input value="5" name="rate" type="radio"><i>Excellent</i>&nbsp;&nbsp;<input value="Vote" class="FormButton" type="submit">
</td></tr>
</tbody></table></td></tr></tbody></table>
</form>
<center>
<table border="0" cellpadding="0" cellspacing="0"><tbody><tr>
<td style="padding: 2px; background-color: rgb(238, 238, 238);" height="60" width="120"><div align="center">
<script language="javascript">document.write("<a href=\"/script/admentor/admentorredir.asp?id=2249&way=ban\" target=_blank><img src=\"/script/ann/ServeImg.aspx?File=%2Fscript%2Fadmentor%2Fimages%2FGrid%5F120x60%2Egif&C=False&id=2249&cb=2047369\" alt=\"\" border=0 width=120 height=60></a>");</script><a href="http://www.codeproject.com/script/admentor/admentorredir.asp?id=2249&amp;way=ban" target="_blank"><img src="allocator.asp_files/ServeImg_003.htm" alt="" border="0" height="60" width="120"></a>
</div></td>
<td width="100">&nbsp;</td>
<td height="60" width="468"><span id="AdBanner5"><script language="javascript">document.write("<a href=\"/script/admentor/admentorredir.asp?id=2252&way=ban\" target=_blank><img src=\"/script/ann/ServeImg.aspx?File=%2Fscript%2Fadmentor%2Fimages%2FGrid%5F468x60%2Egif&C=False&id=2252&cb=2047358\" alt=\"\" border=0 width=468 height=60></a>");</script><a href="http://www.codeproject.com/script/admentor/admentorredir.asp?id=2252&amp;way=ban" target="_blank"><img src="allocator.asp_files/ServeImg_004.htm" alt="" border="0" height="60" width="468"></a></span></td>
</tr></tbody></table></center>

<a name="__comments"></a>

<script language="JavaScript">

function MsgVoteForm(MemberID, MsgID)
{
	document.write("<span id=\"MVF" + MsgID + "\">");
	document.write("Rate this message: ");
	for (var i=1; i<=5;i++)
	{
		document.write("<a href='#xx" + MsgID.toString() + "xx' title='give this message a vote of " + i.toString());
		document.write("' onclick='return RateMsg(" + MemberID.toString() + ", " + MsgID.toString() + ", ");
		document.write(i.toString() + ")'><b>" + i.toString() + "</b></a> ");
	}
	document.write(" (out of 5)");
	document.writeln("</span>");
	
	document.write("<br />Report as <a href='#xx" + MsgID.toString() + "xx' title='Mark as Spam' onclick='return ReportMsg(" + MemberID.toString());
	document.writeln(", " + MsgID.toString() + ",-1)'>Spam</a> or ");
	document.write("<a href='#xx" + MsgID.toString() + "xx' title='Mark as Abuse' onclick='return ReportMsg(" + MemberID.toString());
	document.writeln(", " + MsgID.toString() + ",-2)'>Abuse</a>");
}

function RetypeForm(MemberID, MsgID)
{
	var types = [
				 {pic:'news_general.gif',  id: 1},
	             {pic:'news_info.gif',     id: 2},
	             {pic:'news_question.gif', id: 4},
	             {pic:'news_answer.gif',   id: 8},
	             {pic:'news_game.gif',     id: 16},
	             {pic:'news_spam.gif',     id: 32}
	            ];
	
	document.write("<span id=\"RTF" + MsgID + "\">");
	for (var i=0;i<types.length;i++)
	{
		document.write("<a href='/script/comments/retype?msg=" + MsgID.toString());
		document.write("&mid=" + MemberID.toString() + "&type=" + types[i].id + "'>");
		document.write("<img border=0 src='/script/images/" + types[i].pic + "'></a><br />");
	}
	document.writeln("</span>");
}

function ReportMsg(userid, msgid, score)
{
	if (confirm("Are you sure you want to report this message?") == true)
		return RateMsg(userid, msgid, score);
	else return false;
}


function RateMsg(userid, msgid, score)
{

   var req = new XMLHttpRequest();

   req.onreadystatechange = function()
   {
      if ( req.readyState == 4 )
      {
         if ( req.status == 200 )
         {
         	var respText = req.responseText;
         	var re = new RegExp("\<div\>([^\<]*)\</div\>", "g");
         	var match = re.exec(respText);
         	status.innerHTML = "<b>" + (match)?match[1]:"An error occured" + "</b>";
         }
         else
         {
            status.innerHTML = "<b style='color:red'>Failed!" + req.statusText + "</b>";
         }
      }
   }
   
   var status = document.getElementById("MVF" + msgid);
   if (!status) return;  // should never happen...   
   status.innerHTML = "<b style='color:green'>Voting...</b>";
   
   var strAction = "/script/comments/vote.asp?js=1&user="+userid+"&msg="+msgid+"&score="+score;
   req.open("GET", strAction, true);
   req.send(null);
   return false;
}

</script>


<script language="JavaScript">
var Selected = "";

var AdTime = new Date();


// Ensures the expanded message appears reasonably close to where 
// it should appear: on screen, and if possible, under the mouse cursor.
function SwitchMessage(e)
{
   if ( !e ) e = window.event;
   var target = e.target ? e.target : e.srcElement;

   // is it a post?
   while ( target && target.id != 'DynMessLink' )
      target = target.parentNode;
   if ( !target || target.id != 'DynMessLink' )
      return;

   if (Selected)
   {
      var body = document.getElementById(Selected + "_h1");
      if (body)
         body.style.display = 'none';
      var head = document.getElementById(Selected + "_h0");
      if (head)
         head.bgColor = '#FEF9E7';
   }

   if (Selected == target.name) // just collapse
      Selected="";
   else
   {
      Selected = target.name;
      var body = document.getElementById(Selected + "_h1");
      if (body)
      {
         if (body.style.display=='none')
            body.style.display='';
         else
            body.style.display = 'none';
      }
      var head = document.getElementById(Selected + "_h0");
      if (head)
         head.bgColor = '#99CCFF';

      if ( body && head && body.style.display != 'none' )
      {
         // the bit that keeps the post on-screen and under the cursor
         //var dif = (getRealPos(head, "Top") + head.offsetHeight/2) - (document.body.scrollTop+e.clientY);
         //document.body.scrollTop += dif;
         document.body.scrollTop = getRealPos(head, "Top") - document.body.clientHeight/10;
         EnsureMessageVisible(target.name, true);
      }
   }

   if ( e.preventDefault )
      e.preventDefault();
   else
      e.returnValue = false;
   return false;
}

// does its best to make a message visible on-screen (vs. scrolled off somewhere).
function EnsureMessageVisible(msgID, bShowTop) {
   var msgHeader = document.getElementById(msgID + "_h0");
   var msgBody = document.getElementById(msgID + "_h1");

   // determine scroll position of top and bottom
   var scrollContainer = document.body;
   var top = getRealPos(msgHeader, 'Top');
   var bottom = getRealPos(msgBody, 'Top') + msgBody.offsetHeight;

   // if not already visible, scroll to make it so
   if ( scrollContainer.scrollTop > top && !bShowTop)
      scrollContainer.scrollTop = top - document.body.clientHeight/10;
   if ( scrollContainer.scrollTop+scrollContainer.clientHeight < bottom )
      scrollContainer.scrollTop = bottom-scrollContainer.clientHeight;
   if ( scrollContainer.scrollTop > top && bShowTop)
      scrollContainer.scrollTop = top - document.body.clientHeight/10;
}

// utility
function getRealPos(i,which)
{
   iPos = 0
   while (i!=null)
   {
      iPos += i["offset" + which];
      i = i.offsetParent;
   }
   return iPos
}


</script>
<div id="_MessageBoard" onclick="SwitchMessage(event)"><table bgcolor="#ff9900" border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td width="100%"><table id="ForumTable" bgcolor="#ff9900" border="0" cellpadding="0" cellspacing="1" width="100%"><form action="/script/comments/app/do_filtermessages.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541" method="post"></form><tbody><tr><td><table bgcolor="white" border="0" cellpadding="3" cellspacing="0" width="100%"><tbody><tr bgcolor="#fbedbb"><td class="smalltext" nowrap="nowrap"><a href="http://www.codeproject.com/script/comments/faq.asp"><img src="allocator.asp_files/forum_faq.GIF" align="absmiddle" border="0" height="16" width="16"> <b>FAQ</b></a>&nbsp;</td><td class="smalltext" align="right" nowrap="nowrap" valign="top">Message score threshold <select size="1" name="noise" class="smalltext"><option value="1">1.0 </option>
<option value="2">2.0</option>
<option selected="selected" value="3">3.0</option>
<option value="4">4.0</option>
<option value="5">5.0</option>
</select>&nbsp;&nbsp;</td><td class="smalltext" colspan="2" align="right" nowrap="nowrap" valign="middle"><a href="http://www.codeproject.com/script/comments/search_comments.asp?forumid=16541"><img src="allocator.asp_files/forum_search.gif" border="0" height="15" width="16"> Search comments</a> &nbsp;</td><td align="right" valign="top"><input value="Set Options" name="submit" class="FormButton" type="submit"></td></tr><tr bgcolor="#ff9900"><td width="100%">&nbsp;</td><td class="smalltext" align="right" nowrap="nowrap" valign="top">View <select size="1" name="expand" class="smalltext"><option value="0">Normal (slow)</option>
<option value="2">Preview (slow)</option>
<option selected="selected" value="5">Message View</option>
<option value="6">Topic View</option>
<option value="1">Thread View</option>
<option value="3">Expanded (Supporters only)</option>
</select>&nbsp;&nbsp;</td><td class="smalltext" nowrap="nowrap" valign="top">Per page <select size="1" name="perpage" class="smalltext"><option value="10">10</option>
<option selected="selected" value="25">25</option>
<option value="50">50</option>
</select></td><td colspan="2">&nbsp;</td></tr></tbody></table>
</td></tr><tr bgcolor="#fbedbb"><td><a name="xx0xx"></a><table bgcolor="#fbedbb" border="0" cellpadding="2" width="100%"><tbody><tr><td class="messagetitle"><img src="allocator.asp_files/forum_newmsg.gif" align="top" border="0" height="16" width="16"><a href="http://www.codeproject.com/script/comments/user_new.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541" class="HoverLink" target="_top" name="HoverNL" title="Add a new message to the discussions"><b>New Message</b></a></td><td class="messagetitle">Msgs 1 to 4 of 4 (Total: 4) (<a href="http://www.codeproject.com/cpp/allocator.asp?df=100&amp;forumid=16541">Refresh</a>)</td><td align="right" nowrap="nowrap"><font class="messagetitle"><span class="HoverLink">First</span> <span class="HoverLink">Prev</span> <span class="HoverLink">Next</span> <span class="HoverLink">&nbsp;&nbsp;&nbsp;&nbsp;</span> </font></td></tr></tbody></table>
</td></tr><tr bgcolor="white"><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2" bgcolor="#fbedbb" width="70%"><table border="0" cellpadding="2" cellspacing="0" width="100%"><tbody><tr><td class="messagetitle">Subject&nbsp;</td></tr></tbody></table></td><td bgcolor="#fbedbb" width="140"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="allocator.asp_files/t.gif" border="0" height="1" width="1"></td></tr><tr><td class="messagetitle">Author&nbsp;</td></tr><tr><td><img src="allocator.asp_files/t.gif" border="0" height="1" width="1"></td></tr></tbody></table></td><td bgcolor="#fbedbb" width="12%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="allocator.asp_files/t.gif" border="0" height="1" width="1"></td></tr><tr><td class="messagetitle" align="right">Date&nbsp;</td></tr><tr><td><img src="allocator.asp_files/t.gif" border="0" height="1" width="1"></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="allocator.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr id="1677312_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx1677312xx"></a><img src="allocator.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="1677312" href="http://www.codeproject.com/cpp/allocator.asp?df=100&amp;forumid=16541&amp;select=1677312#xx1677312xx"><b>Doesn't work with Loki 0.1.5</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=1301692"><img src="allocator.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>tamboril2</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>10:39 20 Sep '06</b>&nbsp;</font></td></tr>
<tr id="1677312_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="allocator.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">I'm getting lots of errors with Loki 0.1.5 when trying to use the SmallObjAllocator. <br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541&amp;select=1677312" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541&amp;select=1677312" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/allocator.asp?df=100&amp;tid=1677312&amp;forumid=16541&amp;select=1677312#xx1677312xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/allocator.asp?msg=1677312#xx1677312xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(1301692,1677312);</script><span id="MVF1677312">Rate this message: <a href="#xx1677312xx" title="give this message a vote of 1" onclick="return RateMsg(1301692, 1677312, 1)"><b>1</b></a> <a href="#xx1677312xx" title="give this message a vote of 2" onclick="return RateMsg(1301692, 1677312, 2)"><b>2</b></a> <a href="#xx1677312xx" title="give this message a vote of 3" onclick="return RateMsg(1301692, 1677312, 3)"><b>3</b></a> <a href="#xx1677312xx" title="give this message a vote of 4" onclick="return RateMsg(1301692, 1677312, 4)"><b>4</b></a> <a href="#xx1677312xx" title="give this message a vote of 5" onclick="return RateMsg(1301692, 1677312, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx1677312xx" title="Mark as Spam" onclick="return ReportMsg(1301692, 1677312,-1)">Spam</a> or 
<a href="#xx1677312xx" title="Mark as Abuse" onclick="return ReportMsg(1301692, 1677312,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="allocator.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="allocator.asp_files/t.gif" height="1" width="1"></td></tr><tr id="1227628_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx1227628xx"></a><img src="allocator.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="1227628" href="http://www.codeproject.com/cpp/allocator.asp?df=100&amp;forumid=16541&amp;select=1227628#xx1227628xx"><b>Look my CustomNewDeleteAllocPolicy</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=1659851"><img src="allocator.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>WRice</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>3:57 16 Sep '05</b>&nbsp;</font></td></tr>
<tr id="1227628_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="allocator.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent"><font face="arial">This is my code.<br>How do you think about this?<br><br>You can use this with Loki's SmallObject class.<br>Like this..<br></font></font><pre><font class="messagecontent"><font face="arial">    CustomNewDeleteAllocPolicy&lt; T, <b>SmallObject&lt;&gt;</b> &gt;</font></font></pre><font class="messagecontent"><font face="arial"><br><br>You can use custom allocator class<br></font></font><pre><font class="messagecontent"><font face="arial">    class MyMemoryAllocator<br>    {<br>        static void * operator new(std::size_t size) { return <b>MyMemMan::Malloc(size);</b> }<br>        static void operator delete(void * p, std::size_t size) { <b>MyMemMan::Free(p, size);</b> }<br>    }<br>    CustomNewDeleteAllocPolicy&lt; T, MyMemoryAllocator &gt;</font></font></pre><font class="messagecontent"><font face="arial"><br><br></font></font><pre><font class="messagecontent"><font face="arial">///////////////////////////////////////////////////////////////////////////<br>//	class CustomNewDeleteAllocPolicy<br>///////////////////////////////////////////////////////////////////////////<br><br>    //	an allocator use over-rided new/delete method<br>    //  you can use Loki's SmallObject. CustomNewDeleteAllocPolicy&lt; T, SmallObject&lt;&gt; &gt;<br>    template&lt;typename T, <b>typename CustomNewDelete</b>&gt;<br>    class CustomNewDeleteAllocPolicy {<br>    public : <br>        //	typedefs<br>        typedef T value_type;<br>        typedef value_type* pointer;<br>        typedef const value_type* const_pointer;<br>        typedef value_type&amp; reference;<br>        typedef const value_type&amp; const_reference;<br>        typedef std::size_t size_type;<br>        typedef std::ptrdiff_t difference_type;<br><br>    public : <br>        //	convert an CustomNewDeleteAllocPolicy&lt;T&gt; to CustomNewDeleteAllocPolicy&lt;U&gt;<br>        template&lt;typename U&gt;<br>        struct rebind {<br>            typedef CustomNewDeleteAllocPolicy&lt;U, CustomNewDelete&gt; other;<br>        };<br><br>    public : <br>        inline explicit CustomNewDeleteAllocPolicy() {}<br>        inline ~CustomNewDeleteAllocPolicy() {}<br>        inline explicit CustomNewDeleteAllocPolicy(CustomNewDeleteAllocPolicy const&amp;) {}<br>        template &lt;typename T2, typename CustomNewDelete&gt;<br>        inline explicit CustomNewDeleteAllocPolicy(CustomNewDeleteAllocPolicy&lt;T2, CustomNewDelete&gt; const&amp;) {}<br><br>        //	memory allocation<br>        inline pointer allocate(size_type cnt, typename std::allocator&lt;void&gt;::const_pointer = 0) {<br>            <b>return reinterpret_cast&lt;T*&gt;(CustomNewDelete::operator new(sizeof(T) * cnt));</b><br>        }<br>        inline void deallocate(pointer p, size_type cnt) {<br>            <b>CustomNewDelete::operator delete(p, sizeof(T) * cnt);</b><br>        }<br><br>        //	size<br>        inline size_type max_size() const { return std::numeric_limits&lt;size_type&gt;::max() / sizeof(T); }<br>    };	//	end of class CustomNewDeleteAllocPolicy<br><br>    template&lt;typename T, typename N&gt;<br>    inline bool operator==(CustomNewDeleteAllocPolicy&lt;T, N&gt; const&amp;, CustomNewDeleteAllocPolicy&lt;T, N&gt; const&amp;) { <br>        return true;<br>    }<br>    template&lt;typename T, typename N, typename T2, typename N2&gt;<br>    inline bool operator==(CustomNewDeleteAllocPolicy&lt;T, N&gt; const&amp;, CustomNewDeleteAllocPolicy&lt;T2, N2&gt; const&amp;) { <br>        return false;<br>    }<br>    template&lt;typename T, typename N, typename OtherAllocator&gt;<br>    inline bool operator==(CustomNewDeleteAllocPolicy&lt;T, N&gt; const&amp;, OtherAllocator const&amp;) { <br>        return false; <br>    }</font></font></pre><font class="messagecontent"><font face="arial"><br> </font><br>http://www.wrice.org<br>WRice means White Rice.<br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541&amp;select=1227628" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541&amp;select=1227628" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/allocator.asp?df=100&amp;tid=1227628&amp;forumid=16541&amp;select=1227628#xx1227628xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/allocator.asp?msg=1227628#xx1227628xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(1659851,1227628);</script><span id="MVF1227628">Rate this message: <a href="#xx1227628xx" title="give this message a vote of 1" onclick="return RateMsg(1659851, 1227628, 1)"><b>1</b></a> <a href="#xx1227628xx" title="give this message a vote of 2" onclick="return RateMsg(1659851, 1227628, 2)"><b>2</b></a> <a href="#xx1227628xx" title="give this message a vote of 3" onclick="return RateMsg(1659851, 1227628, 3)"><b>3</b></a> <a href="#xx1227628xx" title="give this message a vote of 4" onclick="return RateMsg(1659851, 1227628, 4)"><b>4</b></a> <a href="#xx1227628xx" title="give this message a vote of 5" onclick="return RateMsg(1659851, 1227628, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx1227628xx" title="Mark as Spam" onclick="return ReportMsg(1659851, 1227628,-1)">Spam</a> or 
<a href="#xx1227628xx" title="Mark as Abuse" onclick="return ReportMsg(1659851, 1227628,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="allocator.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="allocator.asp_files/t.gif" height="1" width="1"></td></tr><tr id="1224593_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx1224593xx"></a><img src="allocator.asp_files/news_question.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="1224593" href="http://www.codeproject.com/cpp/allocator.asp?df=100&amp;forumid=16541&amp;select=1224593#xx1224593xx"><b>TackAllocPolicy is Not working well.</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><img src="allocator.asp_files/usersuss.gif" alt="Unconfirmed/Anonymous posting" height="13" width="15">&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>Kwak Jae Hyuk</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>9:56 13 Sep '05</b>&nbsp;</font></td></tr>
<tr id="1224593_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="allocator.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">I using this code.<br>But, TrackAllocPolicy is not working well.<br>My code is here.<br><br>typedef
vector&lt; int, Allocator&lt; int, TrackAllocPolicy&lt; int,
SmallObjectAllocPolicy&lt; int &gt; &gt; &gt; &gt; MyVectorType;<br><br>MyVectorType k1;<br>k1.push_back(30);<br><br>MyVectorType k2(k1); // problem!!<br>size_t Cur2 = k2.get_allocator().CurrentAllocations(); // return 2!!!! I expected 1 <img src="allocator.asp_files/smiley_OMG.gif" align="absmiddle"><br>size_t Cur1 = k1.get_allocator().CurrentAllocations(); // return 1<br><br>MyVectorType k3;<br>k3 = k1;<br>size_t Cur3 = k3.get_allocator().CurrentAllocations(); // return 1<br><br>Plz, check is problem. <br><br>White Rice - http://www.wrice.org<br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541&amp;select=1224593" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541&amp;select=1224593" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/allocator.asp?df=100&amp;tid=1224593&amp;forumid=16541&amp;select=1224593#xx1224593xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/allocator.asp?msg=1224593#xx1224593xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right">[<a href="http://www.codeproject.com/script/comments/owner_modify_pw.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541&amp;select=1224593">Modify</a> | <a href="http://www.codeproject.com/script/comments/owner_delete_pw.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541&amp;select=1224593">Delete</a>]<br> <script language="Javascript">MsgVoteForm(0,1224593);</script><span id="MVF1224593">Rate this message: <a href="#xx1224593xx" title="give this message a vote of 1" onclick="return RateMsg(0, 1224593, 1)"><b>1</b></a> <a href="#xx1224593xx" title="give this message a vote of 2" onclick="return RateMsg(0, 1224593, 2)"><b>2</b></a> <a href="#xx1224593xx" title="give this message a vote of 3" onclick="return RateMsg(0, 1224593, 3)"><b>3</b></a> <a href="#xx1224593xx" title="give this message a vote of 4" onclick="return RateMsg(0, 1224593, 4)"><b>4</b></a> <a href="#xx1224593xx" title="give this message a vote of 5" onclick="return RateMsg(0, 1224593, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx1224593xx" title="Mark as Spam" onclick="return ReportMsg(0, 1224593,-1)">Spam</a> or 
<a href="#xx1224593xx" title="Mark as Abuse" onclick="return ReportMsg(0, 1224593,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="allocator.asp_files/t.gif" border="0" height="5" width="1"></td></tr><tr height="1"><td colspan="4" bgcolor="#ff9900"><img src="allocator.asp_files/t.gif" height="1" width="1"></td></tr><tr id="1139197_h0" bgcolor="#fef9e7"><td width="70%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="white"><a name="xx1139197xx"></a><img src="allocator.asp_files/news_general.gif" align="absmiddle">&nbsp;</td>
<td class="messagetitle" width="100%"><a class="messagetitle" id="DynMessLink" name="1139197" href="http://www.codeproject.com/cpp/allocator.asp?df=100&amp;forumid=16541&amp;select=1139197#xx1139197xx"><b>Good article</b></a></td></tr></tbody></table></td><td nowrap="nowrap" valign="bottom"><a href="http://www.codeproject.com/script/profile/whos_who.asp?id=1295110"><img src="allocator.asp_files/userinfo.gif" title="Click for User Profile" border="0" height="15" width="14"></a>&nbsp;</td><td nowrap="nowrap" width="140"><font class="messagetitle"><b>Christopher Diggins</b>&nbsp;</font></td><td align="right" nowrap="nowrap" width="12%"><font class="messagetitle"><b>14:25 17 Jun '05</b>&nbsp;</font></td></tr>
<tr id="1139197_h1" style="display: none;"><td colspan="4" width="100%"><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="allocator.asp_files/news_blank.gif" align="absmiddle">&nbsp;</td><td bgcolor="#d5eaff" width="100%"><table border="0" cellpadding="0" cellspacing="5" width="100%"><tbody><tr><td><table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td colspan="2"><font class="messagecontent">Good
article. One small point, all of those inlines are superflous. When
functions are defined inside of the class they are supposed to be
automatically treated as if declared inline. (At least that is what
Stroustrup says in TCPL 3).<br><br>Keep up the good work. <br><br>Christopher Diggins - <a href="http://www.ootl.org/">Object Oriented Template Library ( OOTL )</a><br><br>&nbsp;</font></td></tr><tr valign="top"><td class="messagetitle">[<a href="http://www.codeproject.com/script/comments/user_reply.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541&amp;select=1139197" title="Reply to this current thread">Reply</a> | <a href="http://www.codeproject.com/script/comments/user_mail.asp?main=/cpp/allocator.asp&amp;df=100&amp;forumid=16541&amp;select=1139197" title="Email a reply to the author of this message">Email</a> | <a href="http://www.codeproject.com/cpp/allocator.asp?df=100&amp;tid=1139197&amp;forumid=16541&amp;select=1139197#xx1139197xx" title="View only messages within this thread">View Thread</a> | <a href="http://www.codeproject.com/cpp/allocator.asp?msg=1139197#xx1139197xx" title="Get the URL for this message">Get Link</a>]</td><td class="messagetitle" align="right"> <script language="Javascript">MsgVoteForm(1295110,1139197);</script><span id="MVF1139197">Rate this message: <a href="#xx1139197xx" title="give this message a vote of 1" onclick="return RateMsg(1295110, 1139197, 1)"><b>1</b></a> <a href="#xx1139197xx" title="give this message a vote of 2" onclick="return RateMsg(1295110, 1139197, 2)"><b>2</b></a> <a href="#xx1139197xx" title="give this message a vote of 3" onclick="return RateMsg(1295110, 1139197, 3)"><b>3</b></a> <a href="#xx1139197xx" title="give this message a vote of 4" onclick="return RateMsg(1295110, 1139197, 4)"><b>4</b></a> <a href="#xx1139197xx" title="give this message a vote of 5" onclick="return RateMsg(1295110, 1139197, 5)"><b>5</b></a>  (out of 5)</span>
<br>Report as <a href="#xx1139197xx" title="Mark as Spam" onclick="return ReportMsg(1295110, 1139197,-1)">Spam</a> or 
<a href="#xx1139197xx" title="Mark as Abuse" onclick="return ReportMsg(1295110, 1139197,-2)">Abuse</a>
</td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr>
<tr><td colspan="4"><img src="allocator.asp_files/t.gif" border="0" height="5" width="1"></td></tr></tbody></table></td></tr><tr bgcolor="#fbedbb"><td><table cellpadding="2" width="100%"><tbody><tr><td class="messagetitle">Last Visit: 6:34 Monday 27th November, 2006</td><td align="right" nowrap="nowrap"><font class="messagetitle"><span class="HoverLink">First</span> <span class="HoverLink">Prev</span> <span class="HoverLink">Next</span> <span class="HoverLink">&nbsp;&nbsp;&nbsp;&nbsp;</span> </font></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>
</div><p class="smallText"><img src="allocator.asp_files/news_general.gif" align="absmiddle"> General comment &nbsp;&nbsp; <img src="allocator.asp_files/news_info.gif" align="absmiddle"> News / Info &nbsp;&nbsp; <img src="allocator.asp_files/news_question.gif" align="absmiddle"> Question &nbsp;&nbsp; <img src="allocator.asp_files/news_answer.gif" align="absmiddle"> Answer &nbsp;&nbsp; <img src="allocator.asp_files/news_game.gif" align="absmiddle"> Joke / Game &nbsp;&nbsp; <img src="allocator.asp_files/news_sticky.gif" align="absmiddle"> Admin message</p>
<br>


<table cellspacing="5" width="100%">
<tbody><tr valign="top"><td class="smallText">

Updated: 19 Aug 2003
</td><td class="SmallText" align="right">
Article content copyright Lai Shiaw San Kent, 2003<br>
everything else Copyright © <a href="mailto:webmaster@codeproject.com">CodeProject</a>, 1999-2006.

<br>
Web02 |
<a href="http://www.codeproject.com/info/MediaKit">Advertise on The Code Project</a> | <a href="http://www.codeproject.com/info/privacy.asp">Privacy</a>

</td></tr>
</tbody></table>

</td></tr></tbody></table>


<script type="text/javascript" src="allocator.asp_files/front.js"></script><script language="javascript" src="allocator.asp_files/door.js"></script>
<br>
<center>
<table border="0" cellpadding="0" cellspacing="0" width="95%">
<tbody><tr><td bgcolor="#ff9900" height="1"><img src="allocator.asp_files/space.gif" height="1"></td></tr>
<tr>
<td align="center"><font size="1">

<a href="http://www.theultimatetoolbox.com/">The Ultimate Toolbox</a> &#8226;
<a href="http://www.aspalliance.com/">ASP Alliance</a> &#8226;
<a href="http://www.developerfusion.co.uk/">Developer Fusion</a> &#8226;
<a href="http://www.developersdex.com/">Developersdex</a> &#8226;
<a href="http://www.devguru.com/">DevGuru</a> &#8226;
<a href="http://www.programmersheaven.com/">Programmers Heaven</a> &#8226;
<a href="http://www.planet-source-code.com/">Planet Source Code</a> &#8226;
<a href="http://www.tek-tips.com/">Tek-Tips Forums</a> &#8226;

</font>	
</td>
</tr>
</tbody></table>
</center>
</td></tr></tbody></table><div style="position: absolute; visibility: visible; background-color: rgb(72, 142, 0); z-index: 101; width: 381px; height: 22px; top: 115px; left: 874px;"><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 40px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 2px;">Help!</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 55px; height: 16px; padding-left: 5px; padding-top: 2px; left: 50px; top: 2px;">Articles</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 115px; height: 16px; padding-left: 5px; padding-top: 2px; left: 113px; top: 2px;">Message Boards</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 75px; height: 16px; padding-left: 5px; padding-top: 2px; left: 236px; top: 2px;">StoreFront</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 55px; height: 16px; padding-left: 5px; padding-top: 2px; left: 319px; top: 2px;">Lounge</div></div><div style="position: absolute; visibility: hidden; background-color: rgb(72, 142, 0); z-index: 102; width: 194px; height: 98px; top: 0pt; left: 0pt;"><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 185px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 2px;">What is 'The Code Project'?</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 185px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 21px;">General FAQ</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 185px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 40px;">Post a Question</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 185px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 59px;">Site Directory</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 185px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 78px;">About Us</div></div><div style="position: absolute; visibility: hidden; background-color: rgb(72, 142, 0); z-index: 102; width: 154px; height: 136px; top: 0pt; left: 0pt;"><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 2px;">Latest</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 21px;">Most Popular</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 40px;">Search</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 59px;">Site Directory</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 78px;">Submit an Article</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 97px;">Update an Article</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 116px;">Article Competition</div></div><div style="position: absolute; visibility: hidden; background-color: rgb(72, 142, 0); z-index: 102; width: 154px; height: 383px; top: 0pt; left: 0pt;"><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 2px;">Visual C++</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 21px;">ATL / WTL / STL</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 40px;">COM</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 59px;">C++/CLI</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 78px;">C#</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 97px;">ASP.NET</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 116px;">VB.NET</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 135px;">Web Development</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 154px;">.NET Framework</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 173px;">SQL / ADO / ADO.NET</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 192px;">XML / XSL</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 211px;">OS / SysAdmin</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 230px;">Work Issues</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 249px;">Article Requests</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 268px;">Collaboration</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 287px;">General Discussions</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 306px;">Hardware</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 325px;">Algorithms / Math</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 344px;">Suggestions</div><div style="overflow: hidden; position: absolute; visibility: inherit; cursor: pointer; background-color: rgb(72, 142, 0); color: rgb(255, 255, 255); font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 12px; font-weight: bold; font-style: normal; text-align: left; width: 145px; height: 16px; padding-left: 5px; padding-top: 2px; left: 2px; top: 363px;">The Soapbox</div></div><script type="text/javascript" src="allocator.asp_files/func_033.js"></script><script type="text/javascript" src="allocator.asp_files/al.htm"></script></body></html>